---
swagger: "2.0"
info:
  description: "# This API provide access to FACEIT's data"
  version: "4"
  title: "Data API"
  license:
    name: "Property of FACEIT LTD"
host: "open.faceit.com"
basePath: "/data/v4"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- key: []
paths:
  /championships:
    get:
      tags:
      - "Championships"
      summary: "Retrieve all championships of a game"
      description: "Retrieve all championships of a game"
      operationId: "getChampionships"
      produces:
      - "application/json"
      parameters:
      - name: "game"
        in: "query"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "Game"
      - name: "type"
        in: "query"
        description: "Kind of matches to return. Can be all(default), upcoming, ongoing\
          \ or past"
        required: false
        type: "string"
        enum:
        - "all"
        - "upcoming"
        - "ongoing"
        - "past"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 10
        maximum: 10
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Championships list"
          schema:
            $ref: "#/definitions/ChampionshipsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /championships/{championship_id}:
    get:
      tags:
      - "Championships"
      summary: "Retrieve championship details"
      description: "Retrieve championship details"
      operationId: "getChampionship"
      produces:
      - "application/json"
      parameters:
      - name: "championship_id"
        in: "path"
        description: "The id of the championship"
        required: true
        type: "string"
        x-exportParamName: "ChampionshipId"
      - name: "expanded"
        in: "query"
        description: "List of entity names to expand in request"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "organizer"
          - "game"
        collectionFormat: "csv"
        uniqueItems: true
        x-exportParamName: "Expanded"
      responses:
        "200":
          description: "Championship details"
          schema:
            $ref: "#/definitions/Championship"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /championships/{championship_id}/matches:
    get:
      tags:
      - "Championships"
      summary: "Retrieve all matches of a championship"
      description: "Retrieve all matches of a championship"
      operationId: "getChampionshipMatches"
      produces:
      - "application/json"
      parameters:
      - name: "championship_id"
        in: "path"
        description: "The id of the championship"
        required: true
        type: "string"
        x-exportParamName: "ChampionshipId"
      - name: "type"
        in: "query"
        description: "Kind of matches to return. Can be all(default), upcoming, ongoing\
          \ or past"
        required: false
        type: "string"
        enum:
        - "all"
        - "upcoming"
        - "ongoing"
        - "past"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Matches list"
          schema:
            $ref: "#/definitions/MatchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /championships/{championship_id}/results:
    get:
      tags:
      - "Championships"
      summary: "Retrieve all results of a championship"
      description: "Retrieve all results of a championship"
      operationId: "getChampionshipResults"
      produces:
      - "application/json"
      parameters:
      - name: "championship_id"
        in: "path"
        description: "The id of the championship"
        required: true
        type: "string"
        x-exportParamName: "ChampionshipId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Championship results"
          schema:
            $ref: "#/definitions/ChampionshipResultList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /championships/{championship_id}/subscriptions:
    get:
      tags:
      - "Championships"
      summary: "Retrieve all subscriptions of a championship"
      description: "Retrieve all subscriptions of a championship"
      operationId: "getChampionshipSubscriptions"
      produces:
      - "application/json"
      parameters:
      - name: "championship_id"
        in: "path"
        description: "The id of the championship"
        required: true
        type: "string"
        x-exportParamName: "ChampionshipId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 10
        maximum: 10
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Subscriptions list"
          schema:
            $ref: "#/definitions/ChampionshipSubscriptionsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /games:
    get:
      tags:
      - "Games"
      summary: "Retrieve details of all games on FACEIT"
      description: "Retrieve details of all games on FACEIT"
      operationId: "getAllGames"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Games list"
          schema:
            $ref: "#/definitions/GamesList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /games/{gameId}/matchmakings:
    get:
      tags:
      - "Games"
      summary: "Retrieve details of all matchmakings of a game on FACEIT"
      description: "Retrieve details of all matchmakings of a game on FACEIT"
      operationId: "getGameMatchmakings"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      - name: "region"
        in: "query"
        description: "The region of the matchmakings"
        required: false
        type: "string"
        x-exportParamName: "Region"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Matchmakings list"
          schema:
            $ref: "#/definitions/MatchmakingList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /games/{game_id}:
    get:
      tags:
      - "Games"
      summary: "Retrieve game details"
      description: "Retrieve game details"
      operationId: "getGame"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      responses:
        "200":
          description: "Game detail"
          schema:
            $ref: "#/definitions/Game"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /games/{game_id}/parent:
    get:
      tags:
      - "Games"
      summary: "Retrieve the details of the parent game, if the game is region-specific"
      description: "Retrieve the details of the parent game, if the game is region-specific"
      operationId: "getParentGame"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      responses:
        "200":
          description: "Game detail"
          schema:
            $ref: "#/definitions/Game"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /games/{game_id}/queues:
    get:
      tags:
      - "Games"
      summary: "Retrieve queues by filters on FACEIT"
      description: "Retrieve queues by filters on FACEIT. Available only for game\
        \ developers and queue owners(organizers)"
      operationId: "getQueuesByEntityFilters"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      - name: "entity_type"
        in: "query"
        description: "The type of the entity"
        required: true
        type: "string"
        x-exportParamName: "EntityType"
      - name: "entity_id"
        in: "query"
        description: "The id of the entity"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 20
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Queues list"
          schema:
            $ref: "#/definitions/QueuesList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /games/{game_id}/queues/{queue_id}:
    get:
      tags:
      - "Games"
      summary: "Retrieve details of a queue on FACEIT"
      description: "Retrieve details of a queue on FACEIT. Available only for game\
        \ or queue owners(organizers)"
      operationId: "getQueueById"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      - name: "queue_id"
        in: "path"
        description: "The id of the queue"
        required: true
        type: "string"
        x-exportParamName: "QueueId"
      responses:
        "200":
          description: "Queue"
          schema:
            $ref: "#/definitions/Queue"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /games/{game_id}/queues/{queue_id}/bans:
    get:
      tags:
      - "Games"
      summary: "Retrieve queue bans on FACEIT"
      description: "Retrieve queue bans on FACEIT. Available only for game or queue\
        \ owners(organizers)"
      operationId: "getQueueBans"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      - name: "queue_id"
        in: "path"
        description: "The id of the queue"
        required: true
        type: "string"
        x-exportParamName: "QueueId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Bans list"
          schema:
            $ref: "#/definitions/QueueBansList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /games/{game_id}/regions/{region_id}/queues:
    get:
      tags:
      - "Games"
      summary: "Retrieve queues by region on FACEIT"
      description: "Retrieve queues by region on FACEIT. Available only for game developers"
      operationId: "getQueuesByRegion"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      - name: "region_id"
        in: "path"
        description: "The id of the region"
        required: true
        type: "string"
        x-exportParamName: "RegionId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 20
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Queues list"
          schema:
            $ref: "#/definitions/QueuesList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /hubs/{hub_id}:
    get:
      tags:
      - "Hubs"
      summary: "Retrieve hub details"
      description: "Retrieve hub details"
      operationId: "getHub"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      - name: "expanded"
        in: "query"
        description: "List of entity names to expand in request"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "organizer"
          - "game"
        collectionFormat: "csv"
        uniqueItems: true
        x-exportParamName: "Expanded"
      responses:
        "200":
          description: "Hub details"
          schema:
            $ref: "#/definitions/Hub"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /hubs/{hub_id}/matches:
    get:
      tags:
      - "Hubs"
      summary: "Retrieve all matches of a hub"
      description: "Retrieve all matches of a hub"
      operationId: "getHubMatches"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      - name: "type"
        in: "query"
        description: "Kind of matches to return. Can be all(default), upcoming, ongoing\
          \ or past"
        required: false
        type: "string"
        enum:
        - "all"
        - "upcoming"
        - "ongoing"
        - "past"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Matches list"
          schema:
            $ref: "#/definitions/MatchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /hubs/{hub_id}/members:
    get:
      tags:
      - "Hubs"
      summary: "Retrieve all members of a hub"
      description: "Retrieve all members of a hub"
      operationId: "getHubMembers"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        maximum: 1000
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Members list"
          schema:
            $ref: "#/definitions/HubMembers"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /hubs/{hub_id}/roles:
    get:
      tags:
      - "Hubs"
      summary: "Retrieve all roles members can have in a hub"
      description: "Retrieve all roles members can have in a hub"
      operationId: "getHubRoles"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        maximum: 1000
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Roles list"
          schema:
            $ref: "#/definitions/RolesList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /hubs/{hub_id}/rules:
    get:
      tags:
      - "Hubs"
      summary: "Retrieve rules of a hub"
      description: "Retrieve rules of a hub"
      operationId: "getHubRules"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      responses:
        "200":
          description: "Rules details"
          schema:
            $ref: "#/definitions/Rules"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /hubs/{hub_id}/stats:
    get:
      tags:
      - "Hubs"
      summary: "Retrieve statistics of a hub"
      description: "Retrieve statistics of a hub"
      operationId: "getHubStats"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Hub stats"
          schema:
            $ref: "#/definitions/HubStats"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leaderboards/championships/{championship_id}:
    get:
      tags:
      - "Leaderboards"
      summary: "Retrieve all leaderboards of a championship"
      description: "Retrieve all leaderboards of a championship"
      operationId: "getChampionshipLeaderboards"
      produces:
      - "application/json"
      parameters:
      - name: "championship_id"
        in: "path"
        description: "The id of the championship"
        required: true
        type: "string"
        x-exportParamName: "ChampionshipId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Leaderboards list"
          schema:
            $ref: "#/definitions/LeaderboardsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leaderboards/championships/{championship_id}/groups/{group}:
    get:
      tags:
      - "Leaderboards"
      summary: "Retrieve group ranking of a championship"
      description: "Retrieve group ranking of a championship"
      operationId: "getChampionshipGroupRanking"
      produces:
      - "application/json"
      parameters:
      - name: "championship_id"
        in: "path"
        description: "The id of the championship"
        required: true
        type: "string"
        x-exportParamName: "ChampionshipId"
      - name: "group"
        in: "path"
        description: "A group of the championship"
        required: true
        type: "integer"
        x-exportParamName: "Group"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Championship ranking"
          schema:
            $ref: "#/definitions/EntityRanking"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leaderboards/hubs/{hub_id}:
    get:
      tags:
      - "Leaderboards"
      summary: "Retrieve all leaderboards of a hub"
      description: "Retrieve all leaderboards of a hub"
      operationId: "getHubLeaderboards"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Leaderboards list"
          schema:
            $ref: "#/definitions/LeaderboardsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leaderboards/hubs/{hub_id}/general:
    get:
      tags:
      - "Leaderboards"
      summary: "Retrieve all time ranking of a hub"
      description: "Retrieve all time ranking of a hub"
      operationId: "getHubRanking"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Hub ranking"
          schema:
            $ref: "#/definitions/EntityRanking"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leaderboards/hubs/{hub_id}/seasons/{season}:
    get:
      tags:
      - "Leaderboards"
      summary: "Retrieve seasonal ranking of a hub"
      description: "Retrieve seasonal ranking of a hub"
      operationId: "getHubSeasonRanking"
      produces:
      - "application/json"
      parameters:
      - name: "hub_id"
        in: "path"
        description: "The id of the hub"
        required: true
        type: "string"
        x-exportParamName: "HubId"
      - name: "season"
        in: "path"
        description: "A season of the hub"
        required: true
        type: "integer"
        x-exportParamName: "Season"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Hub ranking"
          schema:
            $ref: "#/definitions/EntityRanking"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leaderboards/{leaderboard_id}:
    get:
      tags:
      - "Leaderboards"
      summary: "Retrieve ranking from a leaderboard id"
      description: "Retrieve ranking from a leaderboard id"
      operationId: "getLeaderboard"
      produces:
      - "application/json"
      parameters:
      - name: "leaderboard_id"
        in: "path"
        description: "The id of the leaderboard"
        required: true
        type: "string"
        x-exportParamName: "LeaderboardId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Competition ranking"
          schema:
            $ref: "#/definitions/EntityRanking"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leaderboards/{leaderboard_id}/players/{player_id}:
    get:
      tags:
      - "Leaderboards"
      summary: "Retrieve a players ranking in a leaderboard"
      description: "Retrieve a players ranking in a leaderboard"
      operationId: "getPlayerRankingInLeaderboard"
      produces:
      - "application/json"
      parameters:
      - name: "leaderboard_id"
        in: "path"
        description: "The id of the leaderboard"
        required: true
        type: "string"
        x-exportParamName: "LeaderboardId"
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      responses:
        "200":
          description: "Ranking of the player in the leaderboard"
          schema:
            $ref: "#/definitions/Ranking"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leagues/{league_id}:
    get:
      tags:
      - "Leagues"
      summary: "Retrieve details of a league of a matchmaking on FACEIT"
      description: "Retrieve details of a league of a matchmaking on FACEIT"
      operationId: "getLeagueById"
      produces:
      - "application/json"
      parameters:
      - name: "league_id"
        in: "path"
        description: "The id of the league"
        required: true
        type: "string"
        x-exportParamName: "LeagueId"
      responses:
        "200":
          description: "League details"
          schema:
            $ref: "#/definitions/League"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leagues/{league_id}/seasons/{season_id}:
    get:
      tags:
      - "Leagues"
      summary: "Retrieve details of a season of a league on FACEIT"
      description: "Retrieve details of a season of a league on FACEIT"
      operationId: "getLeagueSeason"
      produces:
      - "application/json"
      parameters:
      - name: "league_id"
        in: "path"
        description: "The id of the league"
        required: true
        type: "string"
        x-exportParamName: "LeagueId"
      - name: "season_id"
        in: "path"
        description: "The id of the season"
        required: true
        type: "integer"
        x-exportParamName: "SeasonId"
      responses:
        "200":
          description: "Season details"
          schema:
            $ref: "#/definitions/SeasonDetailed"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /leagues/{league_id}/seasons/{season_id}/players/{player_id}:
    get:
      tags:
      - "Leagues"
      summary: "Retrieve details of a player for a given league and season on FACEIT"
      description: "Retrieve details of a player for a given league and season on\
        \ FACEIT"
      operationId: "getPlayerForLeagueSeason"
      produces:
      - "application/json"
      parameters:
      - name: "league_id"
        in: "path"
        description: "The id of the league"
        required: true
        type: "string"
        x-exportParamName: "LeagueId"
      - name: "season_id"
        in: "path"
        description: "The id of the season"
        required: true
        type: "integer"
        x-exportParamName: "SeasonId"
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      responses:
        "200":
          description: "Player details"
          schema:
            $ref: "#/definitions/PlayerInLeague"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /matches/{match_id}:
    get:
      tags:
      - "Matches"
      summary: "Retrieve match details"
      description: "Retrieve match details"
      operationId: "getMatch"
      produces:
      - "application/json"
      parameters:
      - name: "match_id"
        in: "path"
        description: "The id of the match"
        required: true
        type: "string"
        x-exportParamName: "MatchId"
      responses:
        "200":
          description: "Match details"
          schema:
            $ref: "#/definitions/Match"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /matches/{match_id}/stats:
    get:
      tags:
      - "Matches"
      summary: "Retrieve statistics of a match"
      description: "Retrieve statistics of a match"
      operationId: "getMatchStats"
      produces:
      - "application/json"
      parameters:
      - name: "match_id"
        in: "path"
        description: "The id of the match"
        required: true
        type: "string"
        x-exportParamName: "MatchId"
      responses:
        "200":
          description: "Match stats"
          schema:
            $ref: "#/definitions/MatchStats"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /matchmakings/{matchmaking_id}:
    get:
      tags:
      - "Matchmakings"
      summary: "Retrieve details of a matchmaking of a game on FACEIT"
      description: "Retrieve details of a matchmaking of a game on FACEIT"
      operationId: "getMatchmaking"
      produces:
      - "application/json"
      parameters:
      - name: "matchmaking_id"
        in: "path"
        description: "The id of the matchmaking"
        required: true
        type: "string"
        x-exportParamName: "MatchmakingId"
      responses:
        "200":
          description: "Matchmaking"
          schema:
            $ref: "#/definitions/Matchmaking"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /organizers:
    get:
      tags:
      - "Organizers"
      summary: "Retrieve organizer details from name"
      description: "Retrieve organizer details from name"
      operationId: "getOrganizerByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of the organizer"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Organizer details"
          schema:
            $ref: "#/definitions/Organizer"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /organizers/{organizer_id}:
    get:
      tags:
      - "Organizers"
      summary: "Retrieve organizer details"
      description: "Retrieve organizer details"
      operationId: "getOrganizer"
      produces:
      - "application/json"
      parameters:
      - name: "organizer_id"
        in: "path"
        description: "The id of the organizer"
        required: true
        type: "string"
        x-exportParamName: "OrganizerId"
      responses:
        "200":
          description: "Organizer details"
          schema:
            $ref: "#/definitions/Organizer"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /organizers/{organizer_id}/championships:
    get:
      tags:
      - "Organizers"
      summary: "Retrieve all championships of an organizer"
      description: "Retrieve all championships of an organizer"
      operationId: "getOrganizerChampionships"
      produces:
      - "application/json"
      parameters:
      - name: "organizer_id"
        in: "path"
        description: "The id of the organizer"
        required: true
        type: "string"
        x-exportParamName: "OrganizerId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Championships list"
          schema:
            $ref: "#/definitions/ChampionshipsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /organizers/{organizer_id}/games:
    get:
      tags:
      - "Organizers"
      summary: "Retrieve all games an organizer is involved with"
      description: "Retrieve all games an organizer is involved with"
      operationId: "getOrganizerGames"
      produces:
      - "application/json"
      parameters:
      - name: "organizer_id"
        in: "path"
        description: "The id of the organizer"
        required: true
        type: "string"
        x-exportParamName: "OrganizerId"
      responses:
        "200":
          description: "Games list"
          schema:
            $ref: "#/definitions/GamesList"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /organizers/{organizer_id}/hubs:
    get:
      tags:
      - "Organizers"
      summary: "Retrieve all hubs of an organizer"
      description: "Retrieve all hubs of an organizer"
      operationId: "getOrganizerHubs"
      produces:
      - "application/json"
      parameters:
      - name: "organizer_id"
        in: "path"
        description: "The id of the organizer"
        required: true
        type: "string"
        x-exportParamName: "OrganizerId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        maximum: 1000
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Hubs list"
          schema:
            $ref: "#/definitions/HubsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /organizers/{organizer_id}/tournaments:
    get:
      tags:
      - "Organizers"
      summary: "Retrieve all tournaments of an organizer"
      description: "Retrieve all tournaments of an organizer"
      operationId: "getOrganizerTournaments"
      produces:
      - "application/json"
      parameters:
      - name: "organizer_id"
        in: "path"
        description: "The id of the organizer"
        required: true
        type: "string"
        x-exportParamName: "OrganizerId"
      - name: "type"
        in: "query"
        description: "Kind of tournament. Can be upcoming(default) or past"
        required: false
        type: "string"
        enum:
        - "past"
        - "upcoming"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Tournaments list"
          schema:
            $ref: "#/definitions/TournamentsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players:
    get:
      tags:
      - "Players"
      summary: "Retrieve player details"
      description: "Retrieve player details"
      operationId: "getPlayerFromLookup"
      produces:
      - "application/json"
      parameters:
      - name: "nickname"
        in: "query"
        description: "The nickname of the player on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Nickname"
        x-optionalDataType: "String"
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Game"
        x-optionalDataType: "String"
      - name: "game_player_id"
        in: "query"
        description: "The ID of a player on game's platform"
        required: false
        type: "string"
        x-exportParamName: "GamePlayerId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Player details"
          schema:
            $ref: "#/definitions/Player"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players/{player_id}:
    get:
      tags:
      - "Players"
      summary: "Retrieve player details"
      description: "Retrieve player details"
      operationId: "getPlayer"
      produces:
      - "application/json"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      responses:
        "200":
          description: "Player details"
          schema:
            $ref: "#/definitions/Player"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players/{player_id}/bans:
    get:
      tags:
      - "Players"
      summary: "Retrieve all bans of a player"
      description: "Retrieve all bans of a player"
      operationId: "getPlayerBans"
      produces:
      - "application/json"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Bans of a user"
          schema:
            $ref: "#/definitions/PlayerBansList"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players/{player_id}/games/{game_id}/stats:
    get:
      tags:
      - "Players"
      summary: "Retrieve statistics of a player for a given amount of matches"
      description: "Retrieve statistics of a player for a given amount of matches"
      operationId: "getPlayerStats"
      produces:
      - "application/json"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      - name: "game_id"
        in: "path"
        description: "A game on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        maximum: 200
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "from"
        in: "query"
        description: "Used to filter the dataset by date (minimum). Expected value\
          \ is date (\"items.stats.Match Finished At\") in epoch milliseconds.\n"
        required: false
        type: "integer"
        x-exportParamName: "From"
        x-optionalDataType: "Int32"
      - name: "to"
        in: "query"
        description: "Used to filter the dataset by date (maximum). Expected value\
          \ is date (\"items.stats.Match Finished At\") in epoch milliseconds.\n"
        required: false
        type: "integer"
        x-exportParamName: "To"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Player stats for matches"
          schema:
            $ref: "#/definitions/PlayerStatsForMatchesList"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players/{player_id}/history:
    get:
      tags:
      - "Players"
      summary: "Retrieve all matches of a player"
      description: "Retrieve all matches of a player"
      operationId: "getPlayerHistory"
      produces:
      - "application/json"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "Game"
      - name: "from"
        in: "query"
        description: "The timestamp (Unix time) as lower bound of the query. 1 month\
          \ ago if not specified"
        required: false
        type: "integer"
        minimum: 0
        x-exportParamName: "From"
        x-optionalDataType: "Int32"
      - name: "to"
        in: "query"
        description: "The timestamp (Unix time) as higher bound of the query. Current\
          \ timestamp if not specified"
        required: false
        type: "integer"
        minimum: 0
        x-exportParamName: "To"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        maximum: 1000
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Player matches list"
          schema:
            $ref: "#/definitions/MatchHistoryList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players/{player_id}/hubs:
    get:
      tags:
      - "Players"
      summary: "Retrieve all hubs of a player"
      description: "Retrieve all hubs of a player"
      operationId: "getPlayerHubs"
      produces:
      - "application/json"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        maximum: 1000
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Hubs list"
          schema:
            $ref: "#/definitions/HubsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players/{player_id}/stats/{game_id}:
    get:
      tags:
      - "Players"
      summary: "Retrieve statistics of a player"
      description: "Retrieve statistics of a player"
      operationId: "getPlayerStats"
      produces:
      - "application/json"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      - name: "game_id"
        in: "path"
        description: "A game on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      responses:
        "200":
          description: "Player stats"
          schema:
            $ref: "#/definitions/PlayerStats"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players/{player_id}/teams:
    get:
      tags:
      - "Players"
      summary: "Retrieve all teams of a player"
      description: "Retrieve all teams of a player"
      operationId: "getPlayerTeams"
      produces:
      - "application/json"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Teams of a user"
          schema:
            $ref: "#/definitions/TeamList"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /players/{player_id}/tournaments:
    get:
      tags:
      - "Players"
      summary: "Retrieve all tournaments of a player"
      description: "Retrieve all tournaments of a player"
      operationId: "getPlayerTournaments"
      produces:
      - "application/json"
      parameters:
      - name: "player_id"
        in: "path"
        description: "The id of the player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Tournaments list"
          schema:
            $ref: "#/definitions/TournamentsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /rankings/games/{game_id}/regions/{region}:
    get:
      tags:
      - "Rankings"
      summary: "Retrieve global ranking of a game"
      description: "Retrieve global ranking of a game"
      operationId: "getGlobalRanking"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      - name: "region"
        in: "path"
        description: "A region of a game"
        required: true
        type: "string"
        x-exportParamName: "Region"
      - name: "country"
        in: "query"
        description: "A country code (ISO 3166-1)"
        required: false
        type: "string"
        x-exportParamName: "Country"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Ranking"
          schema:
            $ref: "#/definitions/GlobalRankingList"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /rankings/games/{game_id}/regions/{region}/players/{player_id}:
    get:
      tags:
      - "Rankings"
      summary: "Retrieve user position in the global ranking of a game"
      description: "Retrieve user position in the global ranking of a game"
      operationId: "getPlayerRanking"
      produces:
      - "application/json"
      parameters:
      - name: "game_id"
        in: "path"
        description: "The id of the game"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      - name: "region"
        in: "path"
        description: "A region of a game"
        required: true
        type: "string"
        x-exportParamName: "Region"
      - name: "player_id"
        in: "path"
        description: "The id of a player"
        required: true
        type: "string"
        x-exportParamName: "PlayerId"
      - name: "country"
        in: "query"
        description: "A country code (ISO 3166-1)"
        required: false
        type: "string"
        x-exportParamName: "Country"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Ranking"
          schema:
            $ref: "#/definitions/PlayerGlobalRanking"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /search/championships:
    get:
      tags:
      - "Search"
      summary: "Search for championships"
      description: "Search for championships"
      operationId: "searchChampionships"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of a championship on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Game"
        x-optionalDataType: "String"
      - name: "region"
        in: "query"
        description: "A region of the game"
        required: false
        type: "string"
        x-exportParamName: "Region"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "Kind of competitions to return"
        required: false
        type: "string"
        enum:
        - "all"
        - "upcoming"
        - "ongoing"
        - "past"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "List of championship"
          schema:
            $ref: "#/definitions/CompetitionsSearchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /search/clans:
    get:
      tags:
      - "Search"
      summary: "Search for clans"
      description: "Search for clans"
      operationId: "searchClans"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of a clan on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Game"
        x-optionalDataType: "String"
      - name: "region"
        in: "query"
        description: "A region of the game"
        required: false
        type: "string"
        x-exportParamName: "Region"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "List of hub"
          schema:
            $ref: "#/definitions/ClansSearchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /search/hubs:
    get:
      tags:
      - "Search"
      summary: "Search for hubs"
      description: "Search for hubs"
      operationId: "searchHubs"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of a hub on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Game"
        x-optionalDataType: "String"
      - name: "region"
        in: "query"
        description: "A region of the game"
        required: false
        type: "string"
        x-exportParamName: "Region"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "List of hub"
          schema:
            $ref: "#/definitions/CompetitionsSearchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /search/organizers:
    get:
      tags:
      - "Search"
      summary: "Search for organizers"
      description: "Search for organizers"
      operationId: "searchOrganizers"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of a organizer on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "List of organizers"
          schema:
            $ref: "#/definitions/OrganizersSearchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /search/players:
    get:
      tags:
      - "Search"
      summary: "Search for players"
      description: "Search for players"
      operationId: "searchPlayers"
      produces:
      - "application/json"
      parameters:
      - name: "nickname"
        in: "query"
        description: "The nickname of a player on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "Nickname"
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Game"
        x-optionalDataType: "String"
      - name: "country"
        in: "query"
        description: "A country code (ISO 3166-1)"
        required: false
        type: "string"
        x-exportParamName: "Country"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "List of players"
          schema:
            $ref: "#/definitions/UsersSearchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /search/teams:
    get:
      tags:
      - "Search"
      summary: "Search for teams"
      description: "Search for teams"
      operationId: "searchTeams"
      produces:
      - "application/json"
      parameters:
      - name: "nickname"
        in: "query"
        description: "The nickname of a team on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "Nickname"
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Game"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "List of teams"
          schema:
            $ref: "#/definitions/TeamsSearchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /search/tournaments:
    get:
      tags:
      - "Search"
      summary: "Search for tournaments"
      description: "Search for tournaments"
      operationId: "searchTournaments"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of a tournament on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Game"
        x-optionalDataType: "String"
      - name: "region"
        in: "query"
        description: "A region of the game"
        required: false
        type: "string"
        x-exportParamName: "Region"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "Kind of competitions to return"
        required: false
        type: "string"
        enum:
        - "all"
        - "upcoming"
        - "ongoing"
        - "past"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "List of tournament"
          schema:
            $ref: "#/definitions/CompetitionsSearchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /teams/{team_id}:
    get:
      tags:
      - "Teams"
      summary: "Retrieve team details"
      description: "Retrieve team details"
      operationId: "getTeam"
      produces:
      - "application/json"
      parameters:
      - name: "team_id"
        in: "path"
        description: "The id of the team"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "Team details"
          schema:
            $ref: "#/definitions/Team"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /teams/{team_id}/stats/{game_id}:
    get:
      tags:
      - "Teams"
      summary: "Retrieve statistics of a team"
      description: "Retrieve statistics of a team"
      operationId: "getTeamStats"
      produces:
      - "application/json"
      parameters:
      - name: "team_id"
        in: "path"
        description: "The id of the team"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      - name: "game_id"
        in: "path"
        description: "A game on FACEIT"
        required: true
        type: "string"
        x-exportParamName: "GameId"
      responses:
        "200":
          description: "Team stats"
          schema:
            $ref: "#/definitions/TeamStats"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /teams/{team_id}/tournaments:
    get:
      tags:
      - "Teams"
      summary: "Retrieve tournaments of a team"
      description: "Retrieve tournaments of a team"
      operationId: "getTeamTournaments"
      produces:
      - "application/json"
      parameters:
      - name: "team_id"
        in: "path"
        description: "The id of the team"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Tournaments list"
          schema:
            $ref: "#/definitions/TournamentsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /tournaments:
    get:
      tags:
      - "Tournaments"
      summary: "Retrieve tournaments v1 (no longer used)"
      description: "Retrieve tournaments v1 (no longer used). Please refer to the\
        \ Championships controller to retrieve tournaments v2"
      operationId: "getTournamentsList"
      produces:
      - "application/json"
      parameters:
      - name: "game"
        in: "query"
        description: "A game on FACEIT"
        required: false
        type: "string"
        x-exportParamName: "Game"
        x-optionalDataType: "String"
      - name: "region"
        in: "query"
        description: "A region of the game"
        required: false
        type: "string"
        x-exportParamName: "Region"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Tournaments list"
          schema:
            $ref: "#/definitions/TournamentsList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /tournaments/{tournament_id}:
    get:
      tags:
      - "Tournaments"
      summary: "Retrieve tournament details"
      description: "Retrieve tournament details"
      operationId: "getTournament"
      produces:
      - "application/json"
      parameters:
      - name: "tournament_id"
        in: "path"
        description: "The id of the tournament"
        required: true
        type: "string"
        x-exportParamName: "TournamentId"
      - name: "expanded"
        in: "query"
        description: "List of entity names to expand in request"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "organizer"
          - "game"
        collectionFormat: "csv"
        uniqueItems: true
        x-exportParamName: "Expanded"
      responses:
        "200":
          description: "Tournament details"
          schema:
            $ref: "#/definitions/Tournament"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /tournaments/{tournament_id}/brackets:
    get:
      tags:
      - "Tournaments"
      summary: "Retrieve brackets of a tournament"
      description: "Retrieve brackets of a tournament"
      operationId: "getTournamentBrackets"
      produces:
      - "application/json"
      parameters:
      - name: "tournament_id"
        in: "path"
        description: "The id of the tournament"
        required: true
        type: "string"
        x-exportParamName: "TournamentId"
      responses:
        "200":
          description: "Rounds and matches list"
          schema:
            $ref: "#/definitions/Brackets"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /tournaments/{tournament_id}/matches:
    get:
      tags:
      - "Tournaments"
      summary: "Retrieve all matches of a tournament"
      description: "Retrieve all matches of a tournament"
      operationId: "getTournamentMatches"
      produces:
      - "application/json"
      parameters:
      - name: "tournament_id"
        in: "path"
        description: "The id of the tournament"
        required: true
        type: "string"
        x-exportParamName: "TournamentId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Matches list"
          schema:
            $ref: "#/definitions/MatchList"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
  /tournaments/{tournament_id}/teams:
    get:
      tags:
      - "Tournaments"
      summary: "Retrieve all teams of a tournament"
      description: "Retrieve all teams of a tournament"
      operationId: "getTournamentTeams"
      produces:
      - "application/json"
      parameters:
      - name: "tournament_id"
        in: "path"
        description: "The id of the tournament"
        required: true
        type: "string"
        x-exportParamName: "TournamentId"
      - name: "offset"
        in: "query"
        description: "The starting item position"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "The number of items to return"
        required: false
        type: "integer"
        default: 20
        maximum: 100
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Teams list"
          schema:
            $ref: "#/definitions/TournamentTeams"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "429":
          description: "Too many requests"
        "503":
          description: "Temporarily unavailable"
        default:
          description: "Generic error"
securityDefinitions:
  key:
    description: "API key Authorization"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  AccessMode:
    type: "object"
    properties:
      BlockVolume:
        $ref: "#/definitions/TypeBlock"
      MountVolume:
        $ref: "#/definitions/TypeMount"
      Scope:
        $ref: "#/definitions/Scope"
      Sharing:
        $ref: "#/definitions/SharingMode"
    title: "AccessMode defines the access mode of a volume."
    x-go-package: "github.com/docker/docker/api/types/volume"
  Address:
    type: "object"
    properties:
      address:
        type: "string"
        x-go-name: "Address"
      city:
        type: "string"
        x-go-name: "City"
      country:
        type: "string"
        x-go-name: "Country"
      postcode:
        type: "string"
        x-go-name: "Postcode"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  AlgorithmParameters:
    type: "object"
    properties:
      band:
        $ref: "#/definitions/Band"
    example:
      band:
        value: 2
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Assets:
    type: "object"
    properties:
      color:
        type: "string"
        x-go-name: "Color"
      icon:
        type: "string"
        x-go-name: "Icon"
      image:
        type: "string"
        x-go-name: "Image"
    example:
      image: "image"
      color: "color"
      icon: "icon"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  AuthenticateOKBody:
    type: "object"
    required:
    - "IdentityToken"
    - "Status"
    properties:
      IdentityToken:
        type: "string"
        description: "An opaque token used to authenticate a user after a successful\
          \ login"
      Status:
        type: "string"
        description: "The status of the authentication"
    description: "AuthenticateOKBody authenticate o k body"
    x-go-package: "github.com/docker/docker/api/types/registry"
  Availability:
    type: "string"
    title: "Availability specifies the availability of the volume."
    x-go-package: "github.com/docker/docker/api/types/volume"
  Band:
    type: "object"
    properties:
      value:
        type: "integer"
        format: "int64"
        x-go-name: "Value"
    example:
      value: 2
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  BirthDate:
    type: "object"
    properties:
      date:
        type: "integer"
        format: "int64"
        x-go-name: "Date"
      month:
        type: "integer"
        format: "int64"
        x-go-name: "Month"
      year:
        type: "integer"
        format: "int64"
        x-go-name: "Year"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Brackets:
    type: "object"
    properties:
      game:
        type: "string"
        x-go-name: "Game"
      matches:
        type: "array"
        items:
          $ref: "#/definitions/BracketsMatch"
        x-go-name: "Matches"
      name:
        type: "string"
        x-go-name: "Name"
      rounds:
        type: "array"
        items:
          $ref: "#/definitions/BracketsRound"
        x-go-name: "Rounds"
      status:
        type: "string"
        x-go-name: "Status"
    example:
      game: "game"
      name: "name"
      matches:
      - round: 6
        teams:
          key:
            nickname: "nickname"
            avatar: "avatar"
            team_id: "team_id"
        match_id: "match_id"
        position: 0
        state: "state"
        results:
          score:
            key: 7
          winner: "winner"
        faceit_url: "faceit_url"
      - round: 6
        teams:
          key:
            nickname: "nickname"
            avatar: "avatar"
            team_id: "team_id"
        match_id: "match_id"
        position: 0
        state: "state"
        results:
          score:
            key: 7
          winner: "winner"
        faceit_url: "faceit_url"
      rounds:
      - start_time: 2
        substitution_time: 7
        best_of: 1
        round: 5
        label: "label"
        substitutions_allowed: true
        matches: 5
        starts_asap: true
      - start_time: 2
        substitution_time: 7
        best_of: 1
        round: 5
        label: "label"
        substitutions_allowed: true
        matches: 5
        starts_asap: true
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  BracketsFaction:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      team_id:
        type: "string"
        x-go-name: "ID"
    example:
      nickname: "nickname"
      avatar: "avatar"
      team_id: "team_id"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  BracketsMatch:
    type: "object"
    properties:
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      match_id:
        type: "string"
        x-go-name: "ID"
      position:
        type: "integer"
        format: "int64"
        x-go-name: "Position"
      results:
        $ref: "#/definitions/MatchResult"
      round:
        type: "integer"
        format: "int64"
        x-go-name: "Round"
      state:
        type: "string"
        x-go-name: "State"
      teams:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/BracketsFaction"
        x-go-name: "Teams"
    example:
      round: 6
      teams:
        key:
          nickname: "nickname"
          avatar: "avatar"
          team_id: "team_id"
      match_id: "match_id"
      position: 0
      state: "state"
      results:
        score:
          key: 7
        winner: "winner"
      faceit_url: "faceit_url"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  BracketsRound:
    type: "object"
    properties:
      best_of:
        type: "integer"
        format: "int64"
        x-go-name: "BestOf"
      label:
        type: "string"
        x-go-name: "Label"
      matches:
        type: "integer"
        format: "int64"
        x-go-name: "Matches"
      round:
        type: "integer"
        format: "int64"
        x-go-name: "Round"
      start_time:
        type: "integer"
        format: "int64"
        x-go-name: "StartTime"
      starts_asap:
        type: "boolean"
        x-go-name: "StartsAsap"
      substitution_time:
        type: "integer"
        format: "int64"
        x-go-name: "SubstitutionTime"
      substitutions_allowed:
        type: "boolean"
        x-go-name: "SubstitutionsAllowed"
    example:
      start_time: 2
      substitution_time: 7
      best_of: 1
      round: 5
      label: "label"
      substitutions_allowed: true
      matches: 5
      starts_asap: true
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  CapacityRange:
    type: "object"
    properties:
      LimitBytes:
        type: "integer"
        format: "int64"
        description: "LimitBytes specifies that a volume must not be bigger than this.\
          \ The\nvalue of 0 indicates an unspecified maximum"
      RequiredBytes:
        type: "integer"
        format: "int64"
        description: "RequiredBytes specifies that a volume must be at least this\
          \ big. The\nvalue of 0 indicates an unspecified minimum."
    description: "CapacityRange describes the minimum and maximum capacity a volume\
      \ should be\ncreated with"
    x-go-package: "github.com/docker/docker/api/types/volume"
  Championship:
    type: "object"
    properties:
      anticheat_required:
        type: "boolean"
        x-go-name: "AnticheatRequired"
      avatar:
        type: "string"
        x-go-name: "Avatar"
      background_image:
        type: "string"
        x-go-name: "BackgroundImage"
      championship_id:
        type: "string"
        x-go-name: "ID"
      championship_start:
        type: "integer"
        format: "int64"
        x-go-name: "ChampionshipStart"
      checkin_clear:
        type: "integer"
        format: "int64"
        x-go-name: "CheckinClear"
      checkin_enabled:
        type: "boolean"
        x-go-name: "CheckinEnabled"
      checkin_start:
        type: "integer"
        format: "int64"
        x-go-name: "CheckinStart"
      cover_image:
        type: "string"
        x-go-name: "CoverImage"
      current_subscriptions:
        type: "integer"
        format: "int64"
        x-go-name: "CurrentSubscriptions"
      description:
        type: "string"
        x-go-name: "Description"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      featured:
        type: "boolean"
        x-go-name: "Featured"
      full:
        type: "boolean"
        x-go-name: "Full"
      game_data:
        $ref: "#/definitions/Game"
      game_id:
        type: "string"
        x-go-name: "GameID"
      id:
        type: "string"
        description: "Deprecated: use championship_id instead"
        x-go-name: "IDdep"
      join_checks:
        $ref: "#/definitions/JoinCheck"
      name:
        type: "string"
        x-go-name: "Name"
      organizer_data:
        $ref: "#/definitions/Organizer"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerID"
      prizes:
        type: "array"
        items:
          $ref: "#/definitions/Prize"
        x-go-name: "Prizes"
      region:
        type: "string"
        x-go-name: "Region"
      rules_id:
        type: "string"
        x-go-name: "RulesID"
      schedule:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/ChampionshipSchedule"
        x-go-name: "Schedule"
      screening:
        $ref: "#/definitions/ChampionshipScreening"
      seeding_strategy:
        type: "string"
        x-go-name: "SeedingStrategy"
      slots:
        type: "integer"
        format: "int64"
        x-go-name: "Slots"
      status:
        type: "string"
        x-go-name: "Status"
      stream:
        $ref: "#/definitions/ChampionshipStream"
      subscription_end:
        type: "integer"
        format: "int64"
        x-go-name: "SubscriptionEnd"
      subscription_start:
        type: "integer"
        format: "int64"
        x-go-name: "SubscriptionStart"
      subscriptions_locked:
        type: "boolean"
        x-go-name: "SubscriptionsLocked"
      substitution_configuration:
        $ref: "#/definitions/SubstitutionConfiguration"
      total_groups:
        type: "integer"
        format: "int64"
        x-go-name: "TotalGroups"
      total_prizes:
        type: "integer"
        format: "int64"
        x-go-name: "TotalPrizes"
      total_rounds:
        type: "integer"
        format: "int64"
        x-go-name: "TotalRounds"
      type:
        type: "string"
        x-go-name: "Type"
    example:
      featured: true
      screening:
        id: "id"
        enabled: true
      join_checks:
        max_skill_level: 7
        min_skill_level: 9
        whitelist_geo_countries:
        - "whitelist_geo_countries"
        - "whitelist_geo_countries"
        whitelist_geo_countries_min_players: 3
        allowed_team_types:
        - "allowed_team_types"
        - "allowed_team_types"
        blacklist_geo_countries:
        - "blacklist_geo_countries"
        - "blacklist_geo_countries"
        join_policy: "join_policy"
        membership_type: "membership_type"
      seeding_strategy: "seeding_strategy"
      description: "description"
      type: "type"
      championship_id: "championship_id"
      checkin_start: 5
      stream:
        active: true
        source: "source"
        title: "title"
        platform: "platform"
      organizer_id: "organizer_id"
      cover_image: "cover_image"
      id: "id"
      game_id: "game_id"
      substitution_configuration:
        max_substitutes: 7
        max_substitutions: 1
      total_prizes: 5
      organizer_data:
        youtube: "youtube"
        website: "website"
        twitch: "twitch"
        facebook: "facebook"
        description: "description"
        avatar: "avatar"
        type: "type"
        faceit_url: "faceit_url"
        cover: "cover"
        twitter: "twitter"
        vk: "vk"
        followers_count: 2
        organizer_id: "organizer_id"
        name: "name"
      current_subscriptions: 5
      total_groups: 4
      checkin_clear: 1
      subscriptions_locked: true
      total_rounds: 9
      avatar: "avatar"
      subscription_start: 6
      rules_id: "rules_id"
      faceit_url: "faceit_url"
      background_image: "background_image"
      schedule:
        key:
          date: 1
          status: "status"
      game_data:
        short_label: "short_label"
        assets:
          cover: "cover"
          featured_img_s: "featured_img_s"
          flag_img_l: "flag_img_l"
          flag_img_m: "flag_img_m"
          featured_img_m: "featured_img_m"
          featured_img_l: "featured_img_l"
          flag_img_s: "flag_img_s"
          flag_img_icon: "flag_img_icon"
          landing_page: "landing_page"
        regions:
        - "regions"
        - "regions"
        long_label: "long_label"
        parent_game_id: "parent_game_id"
        game_id: "game_id"
        order: 2
        platforms:
        - "platforms"
        - "platforms"
      slots: 1
      prizes:
      - rank: 7
        faceit_points: 4
      - rank: 7
        faceit_points: 4
      name: "name"
      checkin_enabled: true
      anticheat_required: true
      region: "region"
      championship_start: 6
      subscription_end: 1
      full: true
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipBounds:
    type: "object"
    properties:
      left:
        type: "integer"
        format: "int64"
        x-go-name: "Left"
      right:
        type: "integer"
        format: "int64"
        x-go-name: "Right"
    example:
      left: 6
      right: 1
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipPlacement:
    type: "object"
    properties:
      id:
        type: "string"
        x-go-name: "ID"
      name:
        type: "string"
        x-go-name: "Name"
      type:
        type: "string"
        x-go-name: "Type"
    example:
      name: "name"
      id: "id"
      type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipPlacementGroup:
    type: "object"
    properties:
      bounds:
        $ref: "#/definitions/ChampionshipBounds"
      placements:
        type: "array"
        items:
          $ref: "#/definitions/ChampionshipPlacement"
        x-go-name: "Placements"
    example:
      bounds:
        left: 6
        right: 1
      placements:
      - name: "name"
        id: "id"
        type: "type"
      - name: "name"
        id: "id"
        type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipResultList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/ChampionshipPlacementGroup"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 5
      end: 0
      items:
      - bounds:
          left: 6
          right: 1
        placements:
        - name: "name"
          id: "id"
          type: "type"
        - name: "name"
          id: "id"
          type: "type"
      - bounds:
          left: 6
          right: 1
        placements:
        - name: "name"
          id: "id"
          type: "type"
        - name: "name"
          id: "id"
          type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipSchedule:
    type: "object"
    properties:
      date:
        type: "integer"
        format: "int64"
        x-go-name: "Date"
      status:
        type: "string"
        x-go-name: "Status"
    example:
      date: 1
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipScreening:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        x-go-name: "Enabled"
      id:
        type: "string"
        x-go-name: "Id"
    example:
      id: "id"
      enabled: true
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipStream:
    type: "object"
    properties:
      active:
        type: "boolean"
        x-go-name: "Active"
      platform:
        type: "string"
        x-go-name: "Platform"
      source:
        type: "string"
        x-go-name: "Source"
      title:
        type: "string"
        x-go-name: "Title"
    example:
      active: true
      source: "source"
      title: "title"
      platform: "platform"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipSubscription:
    type: "object"
    properties:
      coach:
        type: "string"
        x-go-name: "Coach"
      coleader:
        type: "string"
        x-go-name: "Coleader"
      group:
        type: "integer"
        format: "int64"
        x-go-name: "Group"
      leader:
        type: "string"
        x-go-name: "Leader"
      roster:
        type: "array"
        items:
          type: "string"
        x-go-name: "Roster"
      status:
        type: "string"
        x-go-name: "Status"
      substitutes:
        type: "array"
        items:
          type: "string"
        x-go-name: "Substitutes"
      team:
        $ref: "#/definitions/Team"
    example:
      leader: "leader"
      roster:
      - "roster"
      - "roster"
      coleader: "coleader"
      substitutes:
      - "substitutes"
      - "substitutes"
      team:
        youtube: "https://youtube.com/team"
        leader: "leader"
        game: "csgo"
        website: "https://team.website"
        facebook: "https://facebook/team"
        description: "Some description"
        avatar: "https://avatar.jpg"
        team_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
        faceit_url: "https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b"
        twitter: "https://twitter/team"
        members:
        - country: "GB"
          user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          nickname: "nickname"
          skill_level: 1
          avatar: "https://avatar.jpg"
          membership_type: "membership_type"
          memberships:
          - "free"
          - "unlimited"
          faceit_url: "faceit_url"
        - country: "GB"
          user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          nickname: "nickname"
          skill_level: 1
          avatar: "https://avatar.jpg"
          membership_type: "membership_type"
          memberships:
          - "free"
          - "unlimited"
          faceit_url: "faceit_url"
        chat_room_id: "team-6204037c-30e6-408b-8aaa-dd8219860b4b"
        name: "name"
        nickname: "nickname"
        team_type: "premade"
        cover_image: "https://cover-image.jpg"
      coach: "coach"
      group: 6
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipSubscriptionsList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/ChampionshipSubscription"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 1
      end: 0
      items:
      - leader: "leader"
        roster:
        - "roster"
        - "roster"
        coleader: "coleader"
        substitutes:
        - "substitutes"
        - "substitutes"
        team:
          youtube: "https://youtube.com/team"
          leader: "leader"
          game: "csgo"
          website: "https://team.website"
          facebook: "https://facebook/team"
          description: "Some description"
          avatar: "https://avatar.jpg"
          team_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          faceit_url: "https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b"
          twitter: "https://twitter/team"
          members:
          - country: "GB"
            user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
            nickname: "nickname"
            skill_level: 1
            avatar: "https://avatar.jpg"
            membership_type: "membership_type"
            memberships:
            - "free"
            - "unlimited"
            faceit_url: "faceit_url"
          - country: "GB"
            user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
            nickname: "nickname"
            skill_level: 1
            avatar: "https://avatar.jpg"
            membership_type: "membership_type"
            memberships:
            - "free"
            - "unlimited"
            faceit_url: "faceit_url"
          chat_room_id: "team-6204037c-30e6-408b-8aaa-dd8219860b4b"
          name: "name"
          nickname: "nickname"
          team_type: "premade"
          cover_image: "https://cover-image.jpg"
        coach: "coach"
        group: 6
        status: "status"
      - leader: "leader"
        roster:
        - "roster"
        - "roster"
        coleader: "coleader"
        substitutes:
        - "substitutes"
        - "substitutes"
        team:
          youtube: "https://youtube.com/team"
          leader: "leader"
          game: "csgo"
          website: "https://team.website"
          facebook: "https://facebook/team"
          description: "Some description"
          avatar: "https://avatar.jpg"
          team_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          faceit_url: "https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b"
          twitter: "https://twitter/team"
          members:
          - country: "GB"
            user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
            nickname: "nickname"
            skill_level: 1
            avatar: "https://avatar.jpg"
            membership_type: "membership_type"
            memberships:
            - "free"
            - "unlimited"
            faceit_url: "faceit_url"
          - country: "GB"
            user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
            nickname: "nickname"
            skill_level: 1
            avatar: "https://avatar.jpg"
            membership_type: "membership_type"
            memberships:
            - "free"
            - "unlimited"
            faceit_url: "faceit_url"
          chat_room_id: "team-6204037c-30e6-408b-8aaa-dd8219860b4b"
          name: "name"
          nickname: "nickname"
          team_type: "premade"
          cover_image: "https://cover-image.jpg"
        coach: "coach"
        group: 6
        status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChampionshipsList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Championship"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 9
      end: 0
      items:
      - featured: true
        screening:
          id: "id"
          enabled: true
        join_checks:
          max_skill_level: 7
          min_skill_level: 9
          whitelist_geo_countries:
          - "whitelist_geo_countries"
          - "whitelist_geo_countries"
          whitelist_geo_countries_min_players: 3
          allowed_team_types:
          - "allowed_team_types"
          - "allowed_team_types"
          blacklist_geo_countries:
          - "blacklist_geo_countries"
          - "blacklist_geo_countries"
          join_policy: "join_policy"
          membership_type: "membership_type"
        seeding_strategy: "seeding_strategy"
        description: "description"
        type: "type"
        championship_id: "championship_id"
        checkin_start: 5
        stream:
          active: true
          source: "source"
          title: "title"
          platform: "platform"
        organizer_id: "organizer_id"
        cover_image: "cover_image"
        id: "id"
        game_id: "game_id"
        substitution_configuration:
          max_substitutes: 7
          max_substitutions: 1
        total_prizes: 5
        organizer_data:
          youtube: "youtube"
          website: "website"
          twitch: "twitch"
          facebook: "facebook"
          description: "description"
          avatar: "avatar"
          type: "type"
          faceit_url: "faceit_url"
          cover: "cover"
          twitter: "twitter"
          vk: "vk"
          followers_count: 2
          organizer_id: "organizer_id"
          name: "name"
        current_subscriptions: 5
        total_groups: 4
        checkin_clear: 1
        subscriptions_locked: true
        total_rounds: 9
        avatar: "avatar"
        subscription_start: 6
        rules_id: "rules_id"
        faceit_url: "faceit_url"
        background_image: "background_image"
        schedule:
          key:
            date: 1
            status: "status"
        game_data:
          short_label: "short_label"
          assets:
            cover: "cover"
            featured_img_s: "featured_img_s"
            flag_img_l: "flag_img_l"
            flag_img_m: "flag_img_m"
            featured_img_m: "featured_img_m"
            featured_img_l: "featured_img_l"
            flag_img_s: "flag_img_s"
            flag_img_icon: "flag_img_icon"
            landing_page: "landing_page"
          regions:
          - "regions"
          - "regions"
          long_label: "long_label"
          parent_game_id: "parent_game_id"
          game_id: "game_id"
          order: 2
          platforms:
          - "platforms"
          - "platforms"
        slots: 1
        prizes:
        - rank: 7
          faceit_points: 4
        - rank: 7
          faceit_points: 4
        name: "name"
        checkin_enabled: true
        anticheat_required: true
        region: "region"
        championship_start: 6
        subscription_end: 1
        full: true
        status: "status"
      - featured: true
        screening:
          id: "id"
          enabled: true
        join_checks:
          max_skill_level: 7
          min_skill_level: 9
          whitelist_geo_countries:
          - "whitelist_geo_countries"
          - "whitelist_geo_countries"
          whitelist_geo_countries_min_players: 3
          allowed_team_types:
          - "allowed_team_types"
          - "allowed_team_types"
          blacklist_geo_countries:
          - "blacklist_geo_countries"
          - "blacklist_geo_countries"
          join_policy: "join_policy"
          membership_type: "membership_type"
        seeding_strategy: "seeding_strategy"
        description: "description"
        type: "type"
        championship_id: "championship_id"
        checkin_start: 5
        stream:
          active: true
          source: "source"
          title: "title"
          platform: "platform"
        organizer_id: "organizer_id"
        cover_image: "cover_image"
        id: "id"
        game_id: "game_id"
        substitution_configuration:
          max_substitutes: 7
          max_substitutions: 1
        total_prizes: 5
        organizer_data:
          youtube: "youtube"
          website: "website"
          twitch: "twitch"
          facebook: "facebook"
          description: "description"
          avatar: "avatar"
          type: "type"
          faceit_url: "faceit_url"
          cover: "cover"
          twitter: "twitter"
          vk: "vk"
          followers_count: 2
          organizer_id: "organizer_id"
          name: "name"
        current_subscriptions: 5
        total_groups: 4
        checkin_clear: 1
        subscriptions_locked: true
        total_rounds: 9
        avatar: "avatar"
        subscription_start: 6
        rules_id: "rules_id"
        faceit_url: "faceit_url"
        background_image: "background_image"
        schedule:
          key:
            date: 1
            status: "status"
        game_data:
          short_label: "short_label"
          assets:
            cover: "cover"
            featured_img_s: "featured_img_s"
            flag_img_l: "flag_img_l"
            flag_img_m: "flag_img_m"
            featured_img_m: "featured_img_m"
            featured_img_l: "featured_img_l"
            flag_img_s: "flag_img_s"
            flag_img_icon: "flag_img_icon"
            landing_page: "landing_page"
          regions:
          - "regions"
          - "regions"
          long_label: "long_label"
          parent_game_id: "parent_game_id"
          game_id: "game_id"
          order: 2
          platforms:
          - "platforms"
          - "platforms"
        slots: 1
        prizes:
        - rank: 7
          faceit_points: 4
        - rank: 7
          faceit_points: 4
        name: "name"
        checkin_enabled: true
        anticheat_required: true
        region: "region"
        championship_start: 6
        subscription_end: 1
        full: true
        status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ChangeType:
    type: "integer"
    title: "ChangeType Kind of change"
    format: "uint8"
    description: "Can be one of:\n\n`0`: Modified (\"C\")\n`1`: Added (\"A\")\n`2`:\
      \ Deleted (\"D\")"
    x-go-package: "github.com/docker/docker/api/types/container"
  CheckIn:
    type: "object"
    properties:
      time:
        type: "integer"
        format: "int64"
        x-go-name: "Time"
    example:
      time: 0
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ClanSearch:
    type: "object"
    properties:
      avatar:
        type: "string"
        example: "https://faceit.com/images/example-clan-avatar.jpeg"
        description: "The clan's avatar url"
        x-go-name: "Avatar"
      game:
        type: "string"
        example: "csgo"
        description: "The game of the clan"
        x-go-name: "Game"
      id:
        type: "string"
        example: "22479709-2064-4688-80fa-f02e97412345"
        description: "The id of the clan"
        x-go-name: "Id"
      join:
        type: "string"
        example: "invite"
        description: "The clan's join type"
        x-go-name: "Join"
      last_match_finished:
        type: "string"
        format: "date-time"
        description: "The time the clan's last match finished"
        x-go-name: "LastMatchFinished"
      matches_count_24h:
        type: "integer"
        format: "int64"
        example: 3
        description: "The clan's matches count in the last 24 hours"
        x-go-name: "MatchesCount24H"
      max_skill_level:
        type: "integer"
        format: "int64"
        example: 10
        description: "The clan's maximum skill level"
        x-go-name: "MaxSkillLevel"
      members_count:
        type: "integer"
        format: "int64"
        example: 72300
        description: "The clan's members count"
        x-go-name: "MembersCount"
      members_count_24h:
        type: "integer"
        format: "int64"
        example: 1
        description: "The clan's members count in the last 24 hours"
        x-go-name: "MembersCount24H"
      min_skill_level:
        type: "integer"
        format: "int64"
        example: 1
        description: "The clan's minimum skill level"
        x-go-name: "MinSkillLevel"
      name:
        type: "string"
        example: "Example Clan"
        description: "The name of the clan"
        x-go-name: "Name"
      organizer_id:
        type: "string"
        example: "f80900c9-88ef-43b4-aa97-d61ea3712345"
        description: "The clan's organizer id"
        x-go-name: "OrganizerId"
      region:
        type: "string"
        example: "eu"
        description: "The region of the clan"
        x-go-name: "Region"
      type:
        type: "string"
        example: "community"
        description: "The type of the clan"
        x-go-name: "Type"
    example:
      game: "csgo"
      matches_count_24h: 3
      members_count_24h: 1
      last_match_finished: "2000-01-23T04:56:07.000+00:00"
      avatar: "https://faceit.com/images/example-clan-avatar.jpeg"
      type: "community"
      max_skill_level: 10
      min_skill_level: 1
      organizer_id: "f80900c9-88ef-43b4-aa97-d61ea3712345"
      name: "Example Clan"
      members_count: 72300
      id: "22479709-2064-4688-80fa-f02e97412345"
      join: "invite"
      region: "eu"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ClansSearchList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/ClanSearch"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - game: "csgo"
        matches_count_24h: 3
        members_count_24h: 1
        last_match_finished: "2000-01-23T04:56:07.000+00:00"
        avatar: "https://faceit.com/images/example-clan-avatar.jpeg"
        type: "community"
        max_skill_level: 10
        min_skill_level: 1
        organizer_id: "f80900c9-88ef-43b4-aa97-d61ea3712345"
        name: "Example Clan"
        members_count: 72300
        id: "22479709-2064-4688-80fa-f02e97412345"
        join: "invite"
        region: "eu"
      - game: "csgo"
        matches_count_24h: 3
        members_count_24h: 1
        last_match_finished: "2000-01-23T04:56:07.000+00:00"
        avatar: "https://faceit.com/images/example-clan-avatar.jpeg"
        type: "community"
        max_skill_level: 10
        min_skill_level: 1
        organizer_id: "f80900c9-88ef-43b4-aa97-d61ea3712345"
        name: "Example Clan"
        members_count: 72300
        id: "22479709-2064-4688-80fa-f02e97412345"
        join: "invite"
        region: "eu"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ClusterVolume:
    type: "object"
    properties:
      CreatedAt:
        type: "string"
        format: "date-time"
      ID:
        type: "string"
        description: "ID is the Swarm ID of the volume. Because cluster volumes are\
          \ Swarm\nobjects, they have an ID, unlike non-cluster volumes, which only\
          \ have a\nName. This ID can be used to refer to the cluster volume."
      Info:
        $ref: "#/definitions/Info"
      PublishStatus:
        type: "array"
        description: "PublishStatus contains the status of the volume as it pertains\
          \ to its\npublishing on Nodes."
        items:
          $ref: "#/definitions/PublishStatus"
      Spec:
        $ref: "#/definitions/ClusterVolumeSpec"
      UpdatedAt:
        type: "string"
        format: "date-time"
      Version:
        $ref: "#/definitions/Version"
    description: "ClusterVolume contains options and information specific to, and\
      \ only present\non, Swarm CSI cluster volumes."
    x-go-package: "github.com/docker/docker/api/types/volume"
  ClusterVolumeSpec:
    type: "object"
    properties:
      AccessMode:
        $ref: "#/definitions/AccessMode"
      AccessibilityRequirements:
        $ref: "#/definitions/TopologyRequirement"
      Availability:
        $ref: "#/definitions/Availability"
      CapacityRange:
        $ref: "#/definitions/CapacityRange"
      Group:
        type: "string"
        description: "Group defines the volume group of this volume. Volumes belonging\
          \ to the\nsame group can be referred to by group name when creating Services.\n\
          Referring to a volume by group instructs swarm to treat volumes in that\n\
          group interchangeably for the purpose of scheduling. Volumes with an\nempty\
          \ string for a group technically all belong to the same, emptystring\ngroup."
      Secrets:
        type: "array"
        description: "Secrets defines Swarm Secrets that are passed to the CSI storage\
          \ plugin\nwhen operating on this volume."
        items:
          $ref: "#/definitions/Secret"
    title: "ClusterVolumeSpec contains the spec used to create this volume."
    x-go-package: "github.com/docker/docker/api/types/volume"
  CompetitionSearch:
    type: "object"
    properties:
      competition_id:
        type: "string"
        x-go-name: "ID"
      competition_type:
        type: "string"
        x-go-name: "Type"
      game:
        type: "string"
        x-go-name: "Game"
      name:
        type: "string"
        x-go-name: "Name"
      number_of_members:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfMembers"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerID"
      organizer_name:
        type: "string"
        x-go-name: "OrganizerName"
      organizer_type:
        type: "string"
        x-go-name: "OrganizerType"
      players_checkedin:
        type: "integer"
        format: "int64"
        x-go-name: "PlayersCheckedIn"
      players_joined:
        type: "integer"
        format: "int64"
        x-go-name: "PlayersJoined"
      prize_type:
        type: "string"
        description: "Tournaments"
        x-go-name: "PrizeType"
      region:
        type: "string"
        x-go-name: "Region"
      slots:
        type: "integer"
        format: "int64"
        description: "Hubs"
        x-go-name: "Slots"
      started_at:
        type: "integer"
        format: "int64"
        x-go-name: "StartedAt"
      status:
        type: "string"
        x-go-name: "Status"
      total_prize:
        type: "string"
        x-go-name: "TotalPrize"
    example:
      competition_type: "competition_type"
      game: "game"
      number_of_members: 6
      players_joined: 5
      organizer_type: "organizer_type"
      slots: 5
      competition_id: "competition_id"
      organizer_id: "organizer_id"
      name: "name"
      players_checkedin: 1
      started_at: 2
      organizer_name: "organizer_name"
      region: "region"
      total_prize: "total_prize"
      prize_type: "prize_type"
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  CompetitionsSearchList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/CompetitionSearch"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 7
      end: 0
      items:
      - competition_type: "competition_type"
        game: "game"
        number_of_members: 6
        players_joined: 5
        organizer_type: "organizer_type"
        slots: 5
        competition_id: "competition_id"
        organizer_id: "organizer_id"
        name: "name"
        players_checkedin: 1
        started_at: 2
        organizer_name: "organizer_name"
        region: "region"
        total_prize: "total_prize"
        prize_type: "prize_type"
        status: "status"
      - competition_type: "competition_type"
        game: "game"
        number_of_members: 6
        players_joined: 5
        organizer_type: "organizer_type"
        slots: 5
        competition_id: "competition_id"
        organizer_id: "organizer_id"
        name: "name"
        players_checkedin: 1
        started_at: 2
        organizer_name: "organizer_name"
        region: "region"
        total_prize: "total_prize"
        prize_type: "prize_type"
        status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ContainerTopOKBody:
    type: "object"
    required:
    - "Processes"
    - "Titles"
    properties:
      Processes:
        type: "array"
        description: "Each process running in the container, where each is process\n\
          is an array of values corresponding to the titles."
        items:
          type: "array"
          items:
            type: "string"
      Titles:
        type: "array"
        description: "The ps column titles"
        items:
          type: "string"
    description: "ContainerTopOKBody OK response to ContainerTop operation"
    x-go-package: "github.com/docker/docker/api/types/container"
  ContainerUpdateOKBody:
    type: "object"
    required:
    - "Warnings"
    properties:
      Warnings:
        type: "array"
        description: "warnings"
        items:
          type: "string"
    description: "ContainerUpdateOKBody OK response to ContainerUpdate operation"
    x-go-package: "github.com/docker/docker/api/types/container"
  CreateOptions:
    type: "object"
    properties:
      ClusterVolumeSpec:
        $ref: "#/definitions/ClusterVolumeSpec"
      Driver:
        type: "string"
        description: "Name of the volume driver to use."
      DriverOpts:
        type: "object"
        description: "A mapping of driver options and values. These options are\n\
          passed directly to the driver and are driver specific."
        additionalProperties:
          type: "string"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
      Name:
        type: "string"
        description: "The new volume's name. If not specified, Docker generates a\
          \ name."
    title: "CreateOptions VolumeConfig"
    description: "Volume configuration"
    x-go-package: "github.com/docker/docker/api/types/volume"
  CreateResponse:
    type: "object"
    required:
    - "Id"
    - "Warnings"
    properties:
      Id:
        type: "string"
        description: "The ID of the created container"
        x-go-name: "ID"
      Warnings:
        type: "array"
        description: "Warnings encountered when creating the container"
        items:
          type: "string"
    title: "CreateResponse ContainerCreateResponse"
    description: "OK response to ContainerCreate operation"
    x-go-package: "github.com/docker/docker/api/types/container"
  DeleteResponse:
    type: "object"
    properties:
      Deleted:
        type: "string"
        description: "The image ID of an image that was deleted"
      Untagged:
        type: "string"
        description: "The image ID of an image that was untagged"
    description: "DeleteResponse delete response"
    x-go-package: "github.com/docker/docker/api/types/image"
  DetailedMatchResult:
    type: "object"
    properties:
      asc_score:
        type: "boolean"
        example: true
        description: "True if the scores should be interpreted ascending (lower score\
          \ wins)"
        x-go-name: "AscScore"
      factions:
        type: "object"
        description: "The factions of the match"
        additionalProperties:
          $ref: "#/definitions/FactionResult"
        x-go-name: "Factions"
      winner:
        type: "string"
        description: "The winner faction"
        x-go-name: "Winner"
    title: "DetailedMatchResult Model"
    description: "# DetailedMatchResult holds detailed match results"
    example:
      winner: "winner"
      asc_score: true
      factions:
        key:
          score: 2
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Division:
    type: "object"
    properties:
      assets:
        $ref: "#/definitions/Assets"
      config_type:
        type: "string"
        description: "The type of the division. Can be nested or classic. Nested means\
          \ that the division has tiers, classic is without tiers."
        x-go-name: "ConfigType"
      leaderboard_config:
        $ref: "#/definitions/LeaderboardConfig"
      leaderboards:
        type: "array"
        description: "The leaderboards of the division"
        items:
          type: "string"
        x-go-name: "Leaderboards"
      max_elo:
        type: "integer"
        format: "int64"
        description: "Max ELO for a user to be placed in this division after placement\
          \ matches"
        x-go-name: "MaxElo"
      min_elo:
        type: "integer"
        format: "int64"
        description: "Min ELO for a user to be placed in this division after placement\
          \ matches"
        x-go-name: "MinElo"
      name:
        type: "string"
        description: "The name of the division."
        x-go-name: "Name"
      tiers:
        type: "array"
        description: "The tiers of the division"
        items:
          $ref: "#/definitions/Tier"
        x-go-name: "Tiers"
      type:
        type: "string"
        description: "The type of the division."
        x-go-name: "Type"
    example:
      tiers:
      - points_target: 5
        name: "name"
        rank: 1
      - points_target: 5
        name: "name"
        rank: 1
      assets:
        image: "image"
        color: "color"
        icon: "icon"
      leaderboard_config:
        relegation:
          consecutive_losses: 3
        max_players: 0
        points_per_win: 10
        starting_points: 6
        points_per_loss: -2
        promotion:
          points: 10
      min_elo: 5
      max_elo: 1
      name: "name"
      leaderboards:
      - "leaderboards"
      - "leaderboards"
      config_type: "config_type"
      type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  EntityRanking:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Ranking"
        x-go-name: "Items"
      leaderboard:
        $ref: "#/definitions/Leaderboard"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      leaderboard:
        end_date: 6
        leaderboard_id: "leaderboard_id"
        competition_type: "competition_type"
        leaderboard_type: "leaderboard_type"
        points_per_draw: 5
        ranking_type: "ranking_type"
        points_per_win: 7
        points_type: "points_type"
        starting_points: 7
        points_per_loss: 2
        leaderboard_mode: "leaderboard_mode"
        min_matches: 5
        ranking_boost: 9
        round: 3
        competition_id: "competition_id"
        leaderboard_name: "leaderboard_name"
        season: 2
        region: "region"
        game_id: "game_id"
        group: 1
        start_date: 4
        status: "status"
      start: 2
      end: 0
      items:
      - lost: 5
        won: 3
        draw: 1
        position: 7
        win_rate: 9.301444243932576
        current_streak: 6
        played: 5
        player:
          country: "GB"
          user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          nickname: "nickname"
          skill_level: 1
          avatar: "https://avatar.jpg"
          membership_type: "membership_type"
          memberships:
          - "free"
          - "unlimited"
          faceit_url: "faceit_url"
        points: 2
      - lost: 5
        won: 3
        draw: 1
        position: 7
        win_rate: 9.301444243932576
        current_streak: 6
        played: 5
        player:
          country: "GB"
          user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          nickname: "nickname"
          skill_level: 1
          avatar: "https://avatar.jpg"
          membership_type: "membership_type"
          memberships:
          - "free"
          - "unlimited"
          faceit_url: "faceit_url"
        points: 2
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ErrorResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "The error message."
        x-go-name: "Message"
    title: "ErrorResponse Represents an error."
    x-go-package: "github.com/docker/docker/api/types"
  Faction:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      faction_id:
        type: "string"
        x-go-name: "ID"
      leader:
        type: "string"
        x-go-name: "Leader"
      name:
        type: "string"
        x-go-name: "Name"
      roster:
        type: "array"
        items:
          $ref: "#/definitions/Roster"
        x-go-name: "Roster"
      roster_v1:
        x-go-name: "RosterV1"
      stats:
        $ref: "#/definitions/Stats"
      substituted:
        type: "boolean"
        x-go-name: "Substituted"
      type:
        type: "string"
        x-go-name: "Type"
    example:
      roster_v1: ""
      leader: "leader"
      roster:
      - player_id: "player_id"
        game_player_id: "game_player_id"
        game_skill_level: 4
        nickname: "nickname"
        anticheat_required: true
        avatar: "avatar"
        membership: "membership"
        game_player_name: "game_player_name"
      - player_id: "player_id"
        game_player_id: "game_player_id"
        game_skill_level: 4
        nickname: "nickname"
        anticheat_required: true
        avatar: "avatar"
        membership: "membership"
        game_player_name: "game_player_name"
      stats:
        winProbability: 6.84685269835264
        rating: 7
        skillLevel:
          average: 1
          range:
            min: 1
            max: 1
      substituted: true
      name: "name"
      faction_id: "faction_id"
      avatar: "avatar"
      type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  FactionResult:
    type: "object"
    properties:
      score:
        type: "integer"
        format: "int64"
        example: 2
        description: "The score of the faction."
        x-go-name: "Score"
    title: "FactionResult Model"
    description: "# FactionResult holds detailed faction score"
    example:
      score: 2
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  FilesystemChange:
    type: "object"
    required:
    - "Kind"
    - "Path"
    properties:
      Kind:
        $ref: "#/definitions/ChangeType"
      Path:
        type: "string"
        description: "Path to file or directory that has changed."
    title: "FilesystemChange Change in the container's filesystem."
    x-go-package: "github.com/docker/docker/api/types/container"
  Game:
    type: "object"
    properties:
      assets:
        $ref: "#/definitions/Game_assets"
      game_id:
        type: "string"
        x-go-name: "ID"
      long_label:
        type: "string"
        x-go-name: "LongLabel"
      order:
        type: "integer"
        format: "int64"
        x-go-name: "Order"
      parent_game_id:
        type: "string"
        x-go-name: "ParentGameID"
      platforms:
        type: "array"
        items:
          type: "string"
        x-go-name: "Platforms"
      regions:
        type: "array"
        items:
          type: "string"
        x-go-name: "Regions"
      short_label:
        type: "string"
        x-go-name: "ShortLabel"
    example:
      short_label: "short_label"
      assets:
        cover: "cover"
        featured_img_s: "featured_img_s"
        flag_img_l: "flag_img_l"
        flag_img_m: "flag_img_m"
        featured_img_m: "featured_img_m"
        featured_img_l: "featured_img_l"
        flag_img_s: "flag_img_s"
        flag_img_icon: "flag_img_icon"
        landing_page: "landing_page"
      regions:
      - "regions"
      - "regions"
      long_label: "long_label"
      parent_game_id: "parent_game_id"
      game_id: "game_id"
      order: 2
      platforms:
      - "platforms"
      - "platforms"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  GameDetail:
    type: "object"
    properties:
      faceit_elo:
        type: "integer"
        format: "int64"
        x-go-name: "FaceitElo"
      game_player_id:
        type: "string"
        x-go-name: "GamePlayerID"
      game_player_name:
        type: "string"
        x-go-name: "GamePlayerName"
      game_profile_id:
        type: "string"
        description: "Deprecated: no more in use"
        x-go-name: "GameProfileID"
      region:
        type: "string"
        x-go-name: "Region"
      regions:
        description: "Deprecated: no more in use"
        x-go-name: "Regions"
      skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "SkillLevel"
      skill_level_label:
        type: "string"
        description: "Deprecated: use SkillLevel instead"
        x-go-name: "SkillLevelLabel"
    example:
      regions: ""
      faceit_elo: 0
      skill_level_label: "skill_level_label"
      game_player_id: "game_player_id"
      game_profile_id: "game_profile_id"
      skill_level: 6
      region: "region"
      game_player_name: "game_player_name"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  GameUserSearch:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      skill_level:
        type: "string"
        x-go-name: "SkillLevel"
    description: "Here we return SkillLevel as string even if it is an int\nas we\
      \ don't want to break the contract with devs"
    example:
      name: "name"
      skill_level: "skill_level"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  GamesList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Game"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - short_label: "short_label"
        assets:
          cover: "cover"
          featured_img_s: "featured_img_s"
          flag_img_l: "flag_img_l"
          flag_img_m: "flag_img_m"
          featured_img_m: "featured_img_m"
          featured_img_l: "featured_img_l"
          flag_img_s: "flag_img_s"
          flag_img_icon: "flag_img_icon"
          landing_page: "landing_page"
        regions:
        - "regions"
        - "regions"
        long_label: "long_label"
        parent_game_id: "parent_game_id"
        game_id: "game_id"
        order: 2
        platforms:
        - "platforms"
        - "platforms"
      - short_label: "short_label"
        assets:
          cover: "cover"
          featured_img_s: "featured_img_s"
          flag_img_l: "flag_img_l"
          flag_img_m: "flag_img_m"
          featured_img_m: "featured_img_m"
          featured_img_l: "featured_img_l"
          flag_img_s: "flag_img_s"
          flag_img_icon: "flag_img_icon"
          landing_page: "landing_page"
        regions:
        - "regions"
        - "regions"
        long_label: "long_label"
        parent_game_id: "parent_game_id"
        game_id: "game_id"
        order: 2
        platforms:
        - "platforms"
        - "platforms"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  GeoDescription:
    type: "object"
    properties:
      en:
        type: "string"
        x-go-name: "En"
      fr:
        type: "string"
        x-go-name: "Fr"
    example:
      en: "en"
      fr: "fr"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  GeoLabel:
    type: "object"
    properties:
      en:
        type: "string"
        x-go-name: "En"
      fr:
        type: "string"
        x-go-name: "Fr"
    example:
      en: "en"
      fr: "fr"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  GlobalRanking:
    type: "object"
    properties:
      country:
        type: "string"
        x-go-name: "Country"
      faceit_elo:
        type: "integer"
        format: "int64"
        x-go-name: "FaceitElo"
      game_skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "SkillLevel"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      player_id:
        type: "string"
        x-go-name: "ID"
      position:
        type: "integer"
        format: "int64"
        x-go-name: "Position"
    example:
      country: "country"
      player_id: "player_id"
      faceit_elo: 6
      game_skill_level: 1
      nickname: "nickname"
      position: 5
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  GlobalRankingList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/GlobalRanking"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 5
      end: 0
      items:
      - country: "country"
        player_id: "player_id"
        faceit_elo: 6
        game_skill_level: 1
        nickname: "nickname"
        position: 5
      - country: "country"
        player_id: "player_id"
        faceit_elo: 6
        game_skill_level: 1
        nickname: "nickname"
        position: 5
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  GraphDriverData:
    type: "object"
    required:
    - "Data"
    - "Name"
    properties:
      Data:
        type: "object"
        description: "Low-level storage metadata, provided as key/value pairs.\n\n\
          This information is driver-specific, and depends on the storage-driver\n\
          in use, and should be used for informational purposes only."
        additionalProperties:
          type: "string"
      Name:
        type: "string"
        description: "Name of the storage driver."
    description: "GraphDriverData Information about the storage driver used to store\
      \ the container's and\nimage's filesystem."
    x-go-package: "github.com/docker/docker/api/types"
  HistoryFaction:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      players:
        type: "array"
        items:
          $ref: "#/definitions/MatchHistoryPlayer"
        x-go-name: "Players"
      team_id:
        type: "string"
        x-go-name: "ID"
      type:
        type: "string"
        x-go-name: "Type"
    example:
      players:
      - player_id: "player_id"
        game_player_id: "game_player_id"
        nickname: "nickname"
        skill_level: 2
        avatar: "avatar"
        game_player_name: "game_player_name"
        faceit_url: "faceit_url"
      - player_id: "player_id"
        game_player_id: "game_player_id"
        nickname: "nickname"
        skill_level: 2
        avatar: "avatar"
        game_player_name: "game_player_name"
        faceit_url: "faceit_url"
      nickname: "nickname"
      avatar: "avatar"
      team_id: "team_id"
      type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  HistoryResponseItem:
    type: "object"
    required:
    - "Comment"
    - "Created"
    - "CreatedBy"
    - "Id"
    - "Size"
    - "Tags"
    properties:
      Comment:
        type: "string"
        description: "comment"
      Created:
        type: "integer"
        format: "int64"
        description: "created"
      CreatedBy:
        type: "string"
        description: "created by"
      Id:
        type: "string"
        description: "Id"
        x-go-name: "ID"
      Size:
        type: "integer"
        format: "int64"
        description: "size"
      Tags:
        type: "array"
        description: "tags"
        items:
          type: "string"
    description: "HistoryResponseItem individual image layer information in response\
      \ to ImageHistory operation"
    x-go-package: "github.com/docker/docker/api/types/image"
  Hub:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      background_image:
        type: "string"
        x-go-name: "BackgroundImage"
      chat_room_id:
        type: "string"
        x-go-name: "ChatID"
      cover_image:
        type: "string"
        x-go-name: "CoverImage"
      description:
        type: "string"
        x-go-name: "Description"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      game_data:
        $ref: "#/definitions/Game"
      game_id:
        type: "string"
        x-go-name: "GameID"
      hub_id:
        type: "string"
        x-go-name: "ID"
      join_permission:
        type: "string"
        x-go-name: "JoinPermission"
      max_skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "MaxSkillLevel"
      min_skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "MinSkillLevel"
      name:
        type: "string"
        x-go-name: "Name"
      organizer_data:
        $ref: "#/definitions/Organizer"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerID"
      players_joined:
        type: "integer"
        format: "int64"
        x-go-name: "PlayersJoined"
      region:
        type: "string"
        x-go-name: "Region"
      rule_id:
        type: "string"
        x-go-name: "RuleID"
    example:
      organizer_data:
        youtube: "youtube"
        website: "website"
        twitch: "twitch"
        facebook: "facebook"
        description: "description"
        avatar: "avatar"
        type: "type"
        faceit_url: "faceit_url"
        cover: "cover"
        twitter: "twitter"
        vk: "vk"
        followers_count: 2
        organizer_id: "organizer_id"
        name: "name"
      players_joined: 1
      description: "description"
      avatar: "avatar"
      faceit_url: "faceit_url"
      background_image: "background_image"
      max_skill_level: 0
      rule_id: "rule_id"
      game_data:
        short_label: "short_label"
        assets:
          cover: "cover"
          featured_img_s: "featured_img_s"
          flag_img_l: "flag_img_l"
          flag_img_m: "flag_img_m"
          featured_img_m: "featured_img_m"
          featured_img_l: "featured_img_l"
          flag_img_s: "flag_img_s"
          flag_img_icon: "flag_img_icon"
          landing_page: "landing_page"
        regions:
        - "regions"
        - "regions"
        long_label: "long_label"
        parent_game_id: "parent_game_id"
        game_id: "game_id"
        order: 2
        platforms:
        - "platforms"
        - "platforms"
      min_skill_level: 6
      hub_id: "hub_id"
      organizer_id: "organizer_id"
      chat_room_id: "chat_room_id"
      name: "name"
      cover_image: "cover_image"
      region: "region"
      game_id: "game_id"
      join_permission: "join_permission"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  HubMembers:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/HubUser"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - user_id: "user_id"
        roles:
        - "roles"
        - "roles"
        nickname: "nickname"
        avatar: "avatar"
        faceit_url: "faceit_url"
      - user_id: "user_id"
        roles:
        - "roles"
        - "roles"
        nickname: "nickname"
        avatar: "avatar"
        faceit_url: "faceit_url"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  HubSmall:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      game_id:
        type: "string"
        x-go-name: "GameID"
      hub_id:
        type: "string"
        x-go-name: "ID"
      name:
        type: "string"
        x-go-name: "Name"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerID"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  HubStats:
    type: "object"
    properties:
      game_id:
        type: "string"
        x-go-name: "GameID"
      players:
        type: "array"
        items:
          $ref: "#/definitions/StatsCompetitionPlayer"
        x-go-name: "Players"
    example:
      players:
      - player_id: "player_id"
        stats:
          key: ""
        nickname: "nickname"
      - player_id: "player_id"
        stats:
          key: ""
        nickname: "nickname"
      game_id: "game_id"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  HubUser:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      roles:
        type: "array"
        items:
          type: "string"
        x-go-name: "Roles"
      user_id:
        type: "string"
        x-go-name: "ID"
    example:
      user_id: "user_id"
      roles:
      - "roles"
      - "roles"
      nickname: "nickname"
      avatar: "avatar"
      faceit_url: "faceit_url"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  HubsList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Hub"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - organizer_data:
          youtube: "youtube"
          website: "website"
          twitch: "twitch"
          facebook: "facebook"
          description: "description"
          avatar: "avatar"
          type: "type"
          faceit_url: "faceit_url"
          cover: "cover"
          twitter: "twitter"
          vk: "vk"
          followers_count: 2
          organizer_id: "organizer_id"
          name: "name"
        players_joined: 1
        description: "description"
        avatar: "avatar"
        faceit_url: "faceit_url"
        background_image: "background_image"
        max_skill_level: 0
        rule_id: "rule_id"
        game_data:
          short_label: "short_label"
          assets:
            cover: "cover"
            featured_img_s: "featured_img_s"
            flag_img_l: "flag_img_l"
            flag_img_m: "flag_img_m"
            featured_img_m: "featured_img_m"
            featured_img_l: "featured_img_l"
            flag_img_s: "flag_img_s"
            flag_img_icon: "flag_img_icon"
            landing_page: "landing_page"
          regions:
          - "regions"
          - "regions"
          long_label: "long_label"
          parent_game_id: "parent_game_id"
          game_id: "game_id"
          order: 2
          platforms:
          - "platforms"
          - "platforms"
        min_skill_level: 6
        hub_id: "hub_id"
        organizer_id: "organizer_id"
        chat_room_id: "chat_room_id"
        name: "name"
        cover_image: "cover_image"
        region: "region"
        game_id: "game_id"
        join_permission: "join_permission"
      - organizer_data:
          youtube: "youtube"
          website: "website"
          twitch: "twitch"
          facebook: "facebook"
          description: "description"
          avatar: "avatar"
          type: "type"
          faceit_url: "faceit_url"
          cover: "cover"
          twitter: "twitter"
          vk: "vk"
          followers_count: 2
          organizer_id: "organizer_id"
          name: "name"
        players_joined: 1
        description: "description"
        avatar: "avatar"
        faceit_url: "faceit_url"
        background_image: "background_image"
        max_skill_level: 0
        rule_id: "rule_id"
        game_data:
          short_label: "short_label"
          assets:
            cover: "cover"
            featured_img_s: "featured_img_s"
            flag_img_l: "flag_img_l"
            flag_img_m: "flag_img_m"
            featured_img_m: "featured_img_m"
            featured_img_l: "featured_img_l"
            flag_img_s: "flag_img_s"
            flag_img_icon: "flag_img_icon"
            landing_page: "landing_page"
          regions:
          - "regions"
          - "regions"
          long_label: "long_label"
          parent_game_id: "parent_game_id"
          game_id: "game_id"
          order: 2
          platforms:
          - "platforms"
          - "platforms"
        min_skill_level: 6
        hub_id: "hub_id"
        organizer_id: "organizer_id"
        chat_room_id: "chat_room_id"
        name: "name"
        cover_image: "cover_image"
        region: "region"
        game_id: "game_id"
        join_permission: "join_permission"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  HubsSmallList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/HubSmall"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  IdResponse:
    type: "object"
    required:
    - "Id"
    properties:
      Id:
        type: "string"
        description: "The id of the newly created object."
        x-go-name: "ID"
    description: "IDResponse Response to an API call that returns just an Id"
    x-go-name: "IDResponse"
    x-go-package: "github.com/docker/docker/api/types"
  Info:
    type: "object"
    properties:
      AccessibleTopology:
        type: "array"
        description: "AccessibleTopolgoy is the topology this volume is actually accessible\n\
          from."
        items:
          $ref: "#/definitions/Topology"
      CapacityBytes:
        type: "integer"
        format: "int64"
        description: "CapacityBytes is the capacity of the volume in bytes. A value\
          \ of 0\nindicates that the capacity is unknown."
      VolumeContext:
        type: "object"
        description: "VolumeContext is the context originating from the CSI storage\
          \ plugin\nwhen the Volume is created."
        additionalProperties:
          type: "string"
      VolumeID:
        type: "string"
        description: "VolumeID is the ID of the Volume as seen by the CSI storage\
          \ plugin. This\nis distinct from the Volume's Swarm ID, which is the ID\
          \ used by all of\nthe Docker Engine to refer to the Volume. If this field\
          \ is blank, then\nthe Volume has not been successfully created yet."
    description: "Info contains information about the Volume as a whole as provided\
      \ by\nthe CSI storage plugin."
    x-go-package: "github.com/docker/docker/api/types/volume"
  Item:
    type: "object"
    properties:
      category:
        type: "string"
        x-go-name: "Category"
      country_blacklist:
        type: "array"
        items:
          type: "string"
        x-go-name: "CountryBlacklist"
      country_whitelist:
        type: "array"
        items:
          type: "string"
        x-go-name: "CountryWhitelist"
      created_at:
        type: "string"
        format: "date-time"
        x-go-name: "CreatedAt"
      created_by:
        type: "string"
        x-go-name: "CreatedBy"
      external_id:
        type: "string"
        description: "ExternalId refers to the ID of the item in a third-party shop"
        x-go-name: "ExternalId"
      games:
        type: "array"
        items:
          type: "string"
        x-go-name: "Games"
      id:
        type: "string"
        x-go-name: "Id"
      media:
        $ref: "#/definitions/ItemMedia"
      name:
        type: "string"
        x-go-name: "Name"
      new:
        type: "boolean"
        x-go-name: "New"
      order_type:
        type: "string"
        x-go-name: "OrderType"
      platforms:
        type: "array"
        items:
          type: "string"
        x-go-name: "Platforms"
      price:
        type: "number"
        format: "float"
        x-go-name: "Price"
      published:
        type: "boolean"
        x-go-name: "Published"
      quantity:
        type: "integer"
        format: "int64"
        x-go-name: "Quantity"
      sizes:
        type: "array"
        items:
          type: "string"
        x-go-name: "Sizes"
      tags:
        type: "array"
        items:
          type: "string"
        x-go-name: "Tags"
      unlimited:
        type: "boolean"
        x-go-name: "Unlimited"
      url:
        type: "string"
        x-go-name: "Url"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ItemList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Item"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ItemMedia:
    type: "object"
    properties:
      avatar_full:
        type: "string"
        x-go-name: "AvatarFull"
      avatar_medium:
        type: "string"
        x-go-name: "AvatarMedium"
      avatar_small:
        type: "string"
        x-go-name: "AvatarSmall"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  JoinCheck:
    type: "object"
    properties:
      allowed_team_types:
        type: "array"
        items:
          type: "string"
        x-go-name: "AllowedTeamTypes"
      blacklist_geo_countries:
        type: "array"
        items:
          type: "string"
        x-go-name: "BlackListGeoCountries"
      join_policy:
        type: "string"
        x-go-name: "JoinPolicy"
      max_skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "MaxSkillLevel"
      membership_type:
        type: "string"
        x-go-name: "MembershipType"
      min_skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "MinSkillLevel"
      whitelist_geo_countries:
        type: "array"
        items:
          type: "string"
        x-go-name: "WhitelistGeoCountries"
      whitelist_geo_countries_min_players:
        type: "integer"
        format: "int64"
        x-go-name: "WhitelistGeoCountriesMinPlayers"
    example:
      max_skill_level: 7
      min_skill_level: 9
      whitelist_geo_countries:
      - "whitelist_geo_countries"
      - "whitelist_geo_countries"
      whitelist_geo_countries_min_players: 3
      allowed_team_types:
      - "allowed_team_types"
      - "allowed_team_types"
      blacklist_geo_countries:
      - "blacklist_geo_countries"
      - "blacklist_geo_countries"
      join_policy: "join_policy"
      membership_type: "membership_type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  JoinType:
    type: "object"
    properties:
      maxParty:
        type: "integer"
        format: "int64"
        x-go-name: "MaxParty"
      party:
        type: "boolean"
        x-go-name: "Party"
      premade:
        type: "boolean"
        x-go-name: "Premade"
      solo:
        type: "boolean"
        x-go-name: "Solo"
    example:
      maxParty: 6
      solo: true
      premade: true
      party: true
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Leaderboard:
    type: "object"
    properties:
      competition_id:
        type: "string"
        x-go-name: "CompetitionID"
      competition_type:
        type: "string"
        x-go-name: "CompetitionType"
      end_date:
        type: "integer"
        format: "int64"
        x-go-name: "EndDate"
      game_id:
        type: "string"
        x-go-name: "GameID"
      group:
        type: "integer"
        format: "int64"
        x-go-name: "Group"
      leaderboard_id:
        type: "string"
        x-go-name: "ID"
      leaderboard_mode:
        type: "string"
        x-go-name: "LeaderboardMode"
      leaderboard_name:
        type: "string"
        x-go-name: "LeaderboardName"
      leaderboard_type:
        type: "string"
        x-go-name: "LeaderboardType"
      min_matches:
        type: "integer"
        format: "int64"
        x-go-name: "MinMatches"
      points_per_draw:
        type: "integer"
        format: "int64"
        x-go-name: "PointsPerDraw"
      points_per_loss:
        type: "integer"
        format: "int64"
        x-go-name: "PointsPerLoss"
      points_per_win:
        type: "integer"
        format: "int64"
        x-go-name: "PointsPerWin"
      points_type:
        type: "string"
        x-go-name: "PointsType"
      ranking_boost:
        type: "integer"
        format: "int64"
        x-go-name: "RankingBoost"
      ranking_type:
        type: "string"
        x-go-name: "RankingType"
      region:
        type: "string"
        x-go-name: "Region"
      round:
        type: "integer"
        format: "int64"
        x-go-name: "Round"
      season:
        type: "integer"
        format: "int64"
        x-go-name: "Season"
      start_date:
        type: "integer"
        format: "int64"
        x-go-name: "StartDate"
      starting_points:
        type: "integer"
        format: "int64"
        x-go-name: "StartingPoints"
      status:
        type: "string"
        x-go-name: "Status"
    example:
      end_date: 6
      leaderboard_id: "leaderboard_id"
      competition_type: "competition_type"
      leaderboard_type: "leaderboard_type"
      points_per_draw: 5
      ranking_type: "ranking_type"
      points_per_win: 7
      points_type: "points_type"
      starting_points: 7
      points_per_loss: 2
      leaderboard_mode: "leaderboard_mode"
      min_matches: 5
      ranking_boost: 9
      round: 3
      competition_id: "competition_id"
      leaderboard_name: "leaderboard_name"
      season: 2
      region: "region"
      game_id: "game_id"
      group: 1
      start_date: 4
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  LeaderboardConfig:
    type: "object"
    properties:
      max_players:
        type: "integer"
        format: "int64"
        description: "Max players in the leaderboard."
        x-go-name: "MaxPlayers"
      points_per_loss:
        type: "integer"
        format: "int64"
        example: -2
        description: "User will lose this amount of points if they lose a match"
        x-go-name: "PointsPerLoss"
      points_per_win:
        type: "integer"
        format: "int64"
        example: 10
        description: "User will gain this amount of points if they win a match. When\
          \ not configured, it's using the global value which is 3"
        x-go-name: "PointsPerWin"
      promotion:
        $ref: "#/definitions/Promotion"
      relegation:
        $ref: "#/definitions/Relegation"
      starting_points:
        type: "integer"
        format: "int64"
        description: "Starting points for a player."
        x-go-name: "StartingPoints"
    example:
      relegation:
        consecutive_losses: 3
      max_players: 0
      points_per_win: 10
      starting_points: 6
      points_per_loss: -2
      promotion:
        points: 10
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  LeaderboardsList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Leaderboard"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 1
      end: 0
      items:
      - end_date: 6
        leaderboard_id: "leaderboard_id"
        competition_type: "competition_type"
        leaderboard_type: "leaderboard_type"
        points_per_draw: 5
        ranking_type: "ranking_type"
        points_per_win: 7
        points_type: "points_type"
        starting_points: 7
        points_per_loss: 2
        leaderboard_mode: "leaderboard_mode"
        min_matches: 5
        ranking_boost: 9
        round: 3
        competition_id: "competition_id"
        leaderboard_name: "leaderboard_name"
        season: 2
        region: "region"
        game_id: "game_id"
        group: 1
        start_date: 4
        status: "status"
      - end_date: 6
        leaderboard_id: "leaderboard_id"
        competition_type: "competition_type"
        leaderboard_type: "leaderboard_type"
        points_per_draw: 5
        ranking_type: "ranking_type"
        points_per_win: 7
        points_type: "points_type"
        starting_points: 7
        points_per_loss: 2
        leaderboard_mode: "leaderboard_mode"
        min_matches: 5
        ranking_boost: 9
        round: 3
        competition_id: "competition_id"
        leaderboard_name: "leaderboard_name"
        season: 2
        region: "region"
        game_id: "game_id"
        group: 1
        start_date: 4
        status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  League:
    type: "object"
    properties:
      divisions:
        type: "array"
        description: "The divisions of the league."
        items:
          $ref: "#/definitions/Division"
        x-go-name: "Divisions"
      game:
        type: "string"
        description: "The game of the league."
        x-go-name: "Game"
      id:
        type: "string"
        description: "The id of the league."
        x-go-name: "Id"
      min_matches:
        type: "integer"
        format: "int64"
        description: "The minimum matches of the league."
        x-go-name: "MinMatches"
      region:
        type: "string"
        description: "The region of the league."
        x-go-name: "Region"
      season:
        $ref: "#/definitions/Season"
    title: "League Model"
    description: "The League holds league information."
    example:
      game: "game"
      min_matches: 2
      season:
        end_date: "2000-01-23T04:56:07.000+00:00"
        number: 7
        placement_match_count: 9
        start_date: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      region: "region"
      divisions:
      - tiers:
        - points_target: 5
          name: "name"
          rank: 1
        - points_target: 5
          name: "name"
          rank: 1
        assets:
          image: "image"
          color: "color"
          icon: "icon"
        leaderboard_config:
          relegation:
            consecutive_losses: 3
          max_players: 0
          points_per_win: 10
          starting_points: 6
          points_per_loss: -2
          promotion:
            points: 10
        min_elo: 5
        max_elo: 1
        name: "name"
        leaderboards:
        - "leaderboards"
        - "leaderboards"
        config_type: "config_type"
        type: "type"
      - tiers:
        - points_target: 5
          name: "name"
          rank: 1
        - points_target: 5
          name: "name"
          rank: 1
        assets:
          image: "image"
          color: "color"
          icon: "icon"
        leaderboard_config:
          relegation:
            consecutive_losses: 3
          max_players: 0
          points_per_win: 10
          starting_points: 6
          points_per_loss: -2
          promotion:
            points: 10
        min_elo: 5
        max_elo: 1
        name: "name"
        leaderboards:
        - "leaderboards"
        - "leaderboards"
        config_type: "config_type"
        type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  ListResponse:
    type: "object"
    properties:
      Volumes:
        type: "array"
        description: "List of volumes"
        items:
          $ref: "#/definitions/Volume"
      Warnings:
        type: "array"
        description: "Warnings that occurred when fetching the list of volumes."
        items:
          type: "string"
    title: "ListResponse VolumeListResponse"
    description: "Volume list response"
    x-go-package: "github.com/docker/docker/api/types/volume"
  Match:
    type: "object"
    properties:
      best_of:
        type: "integer"
        format: "int64"
        x-go-name: "BestOf"
      broadcast_start_time:
        type: "integer"
        format: "int64"
        x-go-name: "BroadcastStartTime"
      broadcast_start_time_label:
        type: "string"
        x-go-name: "BroadcastStartTimeLabel"
      calculate_elo:
        type: "boolean"
        x-go-name: "CalculateElo"
      chat_room_id:
        type: "string"
        x-go-name: "ChatID"
      competition_id:
        type: "string"
        x-go-name: "CompetitionID"
      competition_name:
        type: "string"
        x-go-name: "CompetitionName"
      competition_type:
        type: "string"
        x-go-name: "CompetitionType"
      configured_at:
        type: "integer"
        format: "int64"
        x-go-name: "ConfiguredAt"
      demo_url:
        type: "array"
        items:
          type: "string"
        x-go-name: "DemoURL"
      detailed_results:
        type: "array"
        items:
          $ref: "#/definitions/DetailedMatchResult"
        x-go-name: "DetailedResults"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      finished_at:
        type: "integer"
        format: "int64"
        x-go-name: "FinishedAt"
      game:
        type: "string"
        x-go-name: "Game"
      group:
        type: "integer"
        format: "int64"
        x-go-name: "Group"
      match_id:
        type: "string"
        x-go-name: "ID"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerID"
      region:
        type: "string"
        x-go-name: "Region"
      results:
        $ref: "#/definitions/MatchResult"
      round:
        type: "integer"
        format: "int64"
        x-go-name: "Round"
      scheduled_at:
        type: "integer"
        format: "int64"
        x-go-name: "ScheduledAt"
      started_at:
        type: "integer"
        format: "int64"
        x-go-name: "StartedAt"
      status:
        type: "string"
        x-go-name: "Status"
      teams:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Faction"
        x-go-name: "Teams"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
      voting:
        x-go-name: "Voting"
    example:
      competition_type: "competition_type"
      calculate_elo: true
      game: "game"
      finished_at: 5
      demo_url:
      - "demo_url"
      - "demo_url"
      scheduled_at: 3
      voting: ""
      broadcast_start_time: 1
      best_of: 6
      organizer_id: "organizer_id"
      chat_room_id: "chat_room_id"
      results:
        score:
          key: 7
        winner: "winner"
      detailed_results:
      - winner: "winner"
        asc_score: true
        factions:
          key:
            score: 2
      - winner: "winner"
        asc_score: true
        factions:
          key:
            score: 2
      group: 2
      teams:
        key:
          roster_v1: ""
          leader: "leader"
          roster:
          - player_id: "player_id"
            game_player_id: "game_player_id"
            game_skill_level: 4
            nickname: "nickname"
            anticheat_required: true
            avatar: "avatar"
            membership: "membership"
            game_player_name: "game_player_name"
          - player_id: "player_id"
            game_player_id: "game_player_id"
            game_skill_level: 4
            nickname: "nickname"
            anticheat_required: true
            avatar: "avatar"
            membership: "membership"
            game_player_name: "game_player_name"
          stats:
            winProbability: 6.84685269835264
            rating: 7
            skillLevel:
              average: 1
              range:
                min: 1
                max: 1
          substituted: true
          name: "name"
          faction_id: "faction_id"
          avatar: "avatar"
          type: "type"
      match_id: "match_id"
      version: 7
      faceit_url: "faceit_url"
      configured_at: 5
      broadcast_start_time_label: "broadcast_start_time_label"
      competition_name: "competition_name"
      round: 9
      competition_id: "competition_id"
      started_at: 2
      region: "region"
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchHistory:
    type: "object"
    properties:
      competition_id:
        type: "string"
        x-go-name: "CompetitionID"
      competition_name:
        type: "string"
        x-go-name: "CompetitionName"
      competition_type:
        type: "string"
        x-go-name: "CompetitionType"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      finished_at:
        type: "integer"
        format: "int64"
        x-go-name: "FinishedAt"
      game_id:
        type: "string"
        x-go-name: "GameID"
      game_mode:
        type: "string"
        x-go-name: "GameMode"
      match_id:
        type: "string"
        x-go-name: "ID"
      match_type:
        type: "string"
        x-go-name: "MatchType"
      max_players:
        type: "integer"
        format: "int64"
        x-go-name: "MaxPlayers"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerID"
      playing_players:
        type: "array"
        items:
          type: "string"
        x-go-name: "PlayingPlayers"
      region:
        type: "string"
        x-go-name: "Region"
      results:
        $ref: "#/definitions/MatchResult"
      started_at:
        type: "integer"
        format: "int64"
        x-go-name: "StartedAt"
      status:
        type: "string"
        x-go-name: "Status"
      teams:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/HistoryFaction"
        x-go-name: "Teams"
      teams_size:
        type: "integer"
        format: "int64"
        x-go-name: "TeamSize"
    example:
      competition_type: "competition_type"
      finished_at: 1
      teams:
        key:
          players:
          - player_id: "player_id"
            game_player_id: "game_player_id"
            nickname: "nickname"
            skill_level: 2
            avatar: "avatar"
            game_player_name: "game_player_name"
            faceit_url: "faceit_url"
          - player_id: "player_id"
            game_player_id: "game_player_id"
            nickname: "nickname"
            skill_level: 2
            avatar: "avatar"
            game_player_name: "game_player_name"
            faceit_url: "faceit_url"
          nickname: "nickname"
          avatar: "avatar"
          team_id: "team_id"
          type: "type"
      teams_size: 7
      match_id: "match_id"
      faceit_url: "faceit_url"
      competition_name: "competition_name"
      playing_players:
      - "playing_players"
      - "playing_players"
      competition_id: "competition_id"
      organizer_id: "organizer_id"
      game_mode: "game_mode"
      match_type: "match_type"
      started_at: 5
      max_players: 5
      region: "region"
      results:
        score:
          key: 7
        winner: "winner"
      game_id: "game_id"
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchHistoryList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      from:
        type: "integer"
        format: "int64"
        x-go-name: "From"
      items:
        type: "array"
        items:
          $ref: "#/definitions/MatchHistory"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
      to:
        type: "integer"
        format: "int64"
        x-go-name: "To"
    example:
      start: 9
      end: 0
      from: 6
      to: 3
      items:
      - competition_type: "competition_type"
        finished_at: 1
        teams:
          key:
            players:
            - player_id: "player_id"
              game_player_id: "game_player_id"
              nickname: "nickname"
              skill_level: 2
              avatar: "avatar"
              game_player_name: "game_player_name"
              faceit_url: "faceit_url"
            - player_id: "player_id"
              game_player_id: "game_player_id"
              nickname: "nickname"
              skill_level: 2
              avatar: "avatar"
              game_player_name: "game_player_name"
              faceit_url: "faceit_url"
            nickname: "nickname"
            avatar: "avatar"
            team_id: "team_id"
            type: "type"
        teams_size: 7
        match_id: "match_id"
        faceit_url: "faceit_url"
        competition_name: "competition_name"
        playing_players:
        - "playing_players"
        - "playing_players"
        competition_id: "competition_id"
        organizer_id: "organizer_id"
        game_mode: "game_mode"
        match_type: "match_type"
        started_at: 5
        max_players: 5
        region: "region"
        results:
          score:
            key: 7
          winner: "winner"
        game_id: "game_id"
        status: "status"
      - competition_type: "competition_type"
        finished_at: 1
        teams:
          key:
            players:
            - player_id: "player_id"
              game_player_id: "game_player_id"
              nickname: "nickname"
              skill_level: 2
              avatar: "avatar"
              game_player_name: "game_player_name"
              faceit_url: "faceit_url"
            - player_id: "player_id"
              game_player_id: "game_player_id"
              nickname: "nickname"
              skill_level: 2
              avatar: "avatar"
              game_player_name: "game_player_name"
              faceit_url: "faceit_url"
            nickname: "nickname"
            avatar: "avatar"
            team_id: "team_id"
            type: "type"
        teams_size: 7
        match_id: "match_id"
        faceit_url: "faceit_url"
        competition_name: "competition_name"
        playing_players:
        - "playing_players"
        - "playing_players"
        competition_id: "competition_id"
        organizer_id: "organizer_id"
        game_mode: "game_mode"
        match_type: "match_type"
        started_at: 5
        max_players: 5
        region: "region"
        results:
          score:
            key: 7
          winner: "winner"
        game_id: "game_id"
        status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchHistoryPlayer:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      game_player_id:
        type: "string"
        x-go-name: "GamePlayerID"
      game_player_name:
        type: "string"
        x-go-name: "GamePlayerName"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      player_id:
        type: "string"
        x-go-name: "ID"
      skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "SkillLevel"
    example:
      player_id: "player_id"
      game_player_id: "game_player_id"
      nickname: "nickname"
      skill_level: 2
      avatar: "avatar"
      game_player_name: "game_player_name"
      faceit_url: "faceit_url"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Match"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 1
      end: 0
      items:
      - competition_type: "competition_type"
        calculate_elo: true
        game: "game"
        finished_at: 5
        demo_url:
        - "demo_url"
        - "demo_url"
        scheduled_at: 3
        voting: ""
        broadcast_start_time: 1
        best_of: 6
        organizer_id: "organizer_id"
        chat_room_id: "chat_room_id"
        results:
          score:
            key: 7
          winner: "winner"
        detailed_results:
        - winner: "winner"
          asc_score: true
          factions:
            key:
              score: 2
        - winner: "winner"
          asc_score: true
          factions:
            key:
              score: 2
        group: 2
        teams:
          key:
            roster_v1: ""
            leader: "leader"
            roster:
            - player_id: "player_id"
              game_player_id: "game_player_id"
              game_skill_level: 4
              nickname: "nickname"
              anticheat_required: true
              avatar: "avatar"
              membership: "membership"
              game_player_name: "game_player_name"
            - player_id: "player_id"
              game_player_id: "game_player_id"
              game_skill_level: 4
              nickname: "nickname"
              anticheat_required: true
              avatar: "avatar"
              membership: "membership"
              game_player_name: "game_player_name"
            stats:
              winProbability: 6.84685269835264
              rating: 7
              skillLevel:
                average: 1
                range:
                  min: 1
                  max: 1
            substituted: true
            name: "name"
            faction_id: "faction_id"
            avatar: "avatar"
            type: "type"
        match_id: "match_id"
        version: 7
        faceit_url: "faceit_url"
        configured_at: 5
        broadcast_start_time_label: "broadcast_start_time_label"
        competition_name: "competition_name"
        round: 9
        competition_id: "competition_id"
        started_at: 2
        region: "region"
        status: "status"
      - competition_type: "competition_type"
        calculate_elo: true
        game: "game"
        finished_at: 5
        demo_url:
        - "demo_url"
        - "demo_url"
        scheduled_at: 3
        voting: ""
        broadcast_start_time: 1
        best_of: 6
        organizer_id: "organizer_id"
        chat_room_id: "chat_room_id"
        results:
          score:
            key: 7
          winner: "winner"
        detailed_results:
        - winner: "winner"
          asc_score: true
          factions:
            key:
              score: 2
        - winner: "winner"
          asc_score: true
          factions:
            key:
              score: 2
        group: 2
        teams:
          key:
            roster_v1: ""
            leader: "leader"
            roster:
            - player_id: "player_id"
              game_player_id: "game_player_id"
              game_skill_level: 4
              nickname: "nickname"
              anticheat_required: true
              avatar: "avatar"
              membership: "membership"
              game_player_name: "game_player_name"
            - player_id: "player_id"
              game_player_id: "game_player_id"
              game_skill_level: 4
              nickname: "nickname"
              anticheat_required: true
              avatar: "avatar"
              membership: "membership"
              game_player_name: "game_player_name"
            stats:
              winProbability: 6.84685269835264
              rating: 7
              skillLevel:
                average: 1
                range:
                  min: 1
                  max: 1
            substituted: true
            name: "name"
            faction_id: "faction_id"
            avatar: "avatar"
            type: "type"
        match_id: "match_id"
        version: 7
        faceit_url: "faceit_url"
        configured_at: 5
        broadcast_start_time_label: "broadcast_start_time_label"
        competition_name: "competition_name"
        round: 9
        competition_id: "competition_id"
        started_at: 2
        region: "region"
        status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchResult:
    type: "object"
    properties:
      score:
        type: "object"
        additionalProperties:
          type: "integer"
          format: "int64"
        x-go-name: "Score"
      winner:
        type: "string"
        x-go-name: "Winner"
    example:
      score:
        key: 7
      winner: "winner"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchStats:
    type: "object"
    properties:
      rounds:
        type: "array"
        items:
          $ref: "#/definitions/RoundStats"
        x-go-name: "Rounds"
    example:
      rounds:
      - round_stats:
          key: ""
        best_of: ""
        teams:
        - players:
          - player_id: ""
            player_stats:
              key: ""
            nickname: ""
          - player_id: ""
            player_stats:
              key: ""
            nickname: ""
          team_stats:
            key: ""
          team_id: ""
          premade: ""
        - players:
          - player_id: ""
            player_stats:
              key: ""
            nickname: ""
          - player_id: ""
            player_stats:
              key: ""
            nickname: ""
          team_stats:
            key: ""
          team_id: ""
          premade: ""
        competition_id: ""
        match_id: ""
        game_mode: ""
        match_round: ""
        played: ""
        game_id: ""
      - round_stats:
          key: ""
        best_of: ""
        teams:
        - players:
          - player_id: ""
            player_stats:
              key: ""
            nickname: ""
          - player_id: ""
            player_stats:
              key: ""
            nickname: ""
          team_stats:
            key: ""
          team_id: ""
          premade: ""
        - players:
          - player_id: ""
            player_stats:
              key: ""
            nickname: ""
          - player_id: ""
            player_stats:
              key: ""
            nickname: ""
          team_stats:
            key: ""
          team_id: ""
          premade: ""
        competition_id: ""
        match_id: ""
        game_mode: ""
        match_round: ""
        played: ""
        game_id: ""
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Matchmaking:
    type: "object"
    properties:
      game:
        type: "string"
        x-go-name: "Game"
      icon:
        type: "string"
        x-go-name: "Icon"
      id:
        type: "string"
        x-go-name: "Id"
      league_id:
        type: "string"
        x-go-name: "LeagueId"
      long_description:
        type: "string"
        x-go-name: "LongDescription"
      name:
        type: "string"
        x-go-name: "Name"
      queues:
        type: "array"
        items:
          $ref: "#/definitions/MatchmakingQueue"
        x-go-name: "Queues"
      region:
        type: "string"
        x-go-name: "Region"
      short_description:
        type: "string"
        x-go-name: "ShortDescription"
    description: "Matchmaking A detailed representation of a matchmaking"
    example:
      short_description: "short_description"
      game: "game"
      queues:
      - paused: true
        organizer_id: "organizer_id"
        name: "name"
        id: "id"
        open: true
      - paused: true
        organizer_id: "organizer_id"
        name: "name"
        id: "id"
        open: true
      icon: "icon"
      name: "name"
      id: "id"
      long_description: "long_description"
      region: "region"
      league_id: "league_id"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchmakingList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/MatchmakingSlim"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    description: "MatchmakingList A list of matchmaking objects"
    example:
      start: 6
      end: 0
      items:
      - game: "game"
        has_league: true
        name: "name"
        id: "id"
        region: "region"
      - game: "game"
        has_league: true
        name: "name"
        id: "id"
        region: "region"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchmakingQueue:
    type: "object"
    properties:
      id:
        type: "string"
        x-go-name: "Id"
      name:
        type: "string"
        x-go-name: "Name"
      open:
        type: "boolean"
        x-go-name: "Open"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerId"
      paused:
        type: "boolean"
        x-go-name: "Paused"
    example:
      paused: true
      organizer_id: "organizer_id"
      name: "name"
      id: "id"
      open: true
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  MatchmakingSlim:
    type: "object"
    properties:
      game:
        type: "string"
        x-go-name: "Game"
      has_league:
        type: "boolean"
        x-go-name: "HasLeague"
      id:
        type: "string"
        x-go-name: "Id"
      name:
        type: "string"
        x-go-name: "Name"
      region:
        type: "string"
        x-go-name: "Region"
    description: "MatchmakingSlim A slim representation of a matchmaking"
    example:
      game: "game"
      has_league: true
      name: "name"
      id: "id"
      region: "region"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Meta:
    type: "object"
    properties:
      CreatedAt:
        type: "string"
        format: "date-time"
      UpdatedAt:
        type: "string"
        format: "date-time"
      Version:
        $ref: "#/definitions/Version"
    title: "Meta is a base object inherited by most of the other once."
    x-go-package: "github.com/docker/docker/api/types/swarm"
  Order:
    type: "object"
    properties:
      created_at:
        type: "string"
        format: "date-time"
        x-go-name: "CreatedAt"
      game:
        type: "string"
        x-go-name: "Game"
      id:
        type: "string"
        x-go-name: "Id"
      item:
        $ref: "#/definitions/OrderItem"
      status:
        type: "string"
        x-go-name: "Status"
      updated_at:
        type: "string"
        format: "date-time"
        x-go-name: "UpdatedAt"
      user:
        $ref: "#/definitions/OrderUser"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  OrderItem:
    type: "object"
    properties:
      external_id:
        type: "string"
        x-go-name: "ExternalId"
      image_url:
        type: "string"
        x-go-name: "ImageUrl"
      item_id:
        type: "string"
        x-go-name: "ItemId"
      name:
        type: "string"
        x-go-name: "Name"
      price:
        type: "number"
        format: "float"
        x-go-name: "Price"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  OrderList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Order"
        x-go-name: "Orders"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  OrderUser:
    type: "object"
    properties:
      external_id:
        type: "string"
        x-go-name: "ExternalId"
      id:
        type: "string"
        x-go-name: "Id"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Organizer:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      cover:
        type: "string"
        x-go-name: "Cover"
      description:
        type: "string"
        x-go-name: "Description"
      facebook:
        type: "string"
        x-go-name: "Facebook"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      followers_count:
        type: "integer"
        format: "int64"
        x-go-name: "FollowersCount"
      name:
        type: "string"
        x-go-name: "Name"
      organizer_id:
        type: "string"
        x-go-name: "ID"
      twitch:
        type: "string"
        x-go-name: "Twitch"
      twitter:
        type: "string"
        x-go-name: "Twitter"
      type:
        type: "string"
        x-go-name: "Type"
      vk:
        type: "string"
        x-go-name: "Vk"
      website:
        type: "string"
        x-go-name: "Website"
      youtube:
        type: "string"
        x-go-name: "Youtube"
    example:
      youtube: "youtube"
      website: "website"
      twitch: "twitch"
      facebook: "facebook"
      description: "description"
      avatar: "avatar"
      type: "type"
      faceit_url: "faceit_url"
      cover: "cover"
      twitter: "twitter"
      vk: "vk"
      followers_count: 2
      organizer_id: "organizer_id"
      name: "name"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  OrganizerSearch:
    type: "object"
    properties:
      active:
        type: "boolean"
        x-go-name: "Active"
      avatar:
        type: "string"
        x-go-name: "Avatar"
      countries:
        type: "array"
        items:
          type: "string"
        x-go-name: "Countries"
      games:
        type: "array"
        items:
          type: "string"
        x-go-name: "Games"
      name:
        type: "string"
        x-go-name: "Name"
      organizer_id:
        type: "string"
        x-go-name: "ID"
      partner:
        type: "boolean"
        x-go-name: "Partner"
      regions:
        type: "array"
        items:
          type: "string"
        x-go-name: "Regions"
    example:
      regions:
      - "regions"
      - "regions"
      partner: true
      organizer_id: "organizer_id"
      games:
      - "games"
      - "games"
      name: "name"
      active: true
      avatar: "avatar"
      countries:
      - "countries"
      - "countries"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  OrganizersSearchList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/OrganizerSearch"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - regions:
        - "regions"
        - "regions"
        partner: true
        organizer_id: "organizer_id"
        games:
        - "games"
        - "games"
        name: "name"
        active: true
        avatar: "avatar"
        countries:
        - "countries"
        - "countries"
      - regions:
        - "regions"
        - "regions"
        partner: true
        organizer_id: "organizer_id"
        games:
        - "games"
        - "games"
        name: "name"
        active: true
        avatar: "avatar"
        countries:
        - "countries"
        - "countries"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PaginationFields:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Placement:
    type: "object"
    properties:
      division_name:
        type: "string"
        x-go-name: "DivisionName"
      division_type:
        type: "string"
        x-go-name: "DivisionType"
      ladder:
        type: "string"
        x-go-name: "Ladder"
      matchmaking_id:
        type: "string"
        x-go-name: "MatchmakingId"
      season_number:
        type: "integer"
        format: "int64"
        x-go-name: "SeasonNumber"
      tier_name:
        type: "string"
        x-go-name: "TierName"
      tier_rank:
        type: "integer"
        format: "int64"
        x-go-name: "TierRank"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Player:
    type: "object"
    properties:
      activated_at:
        type: "string"
        format: "date-time"
        x-go-name: "ActivatedAt"
      avatar:
        type: "string"
        x-go-name: "Avatar"
      country:
        type: "string"
        x-go-name: "Country"
      cover_featured_image:
        type: "string"
        description: "Deprecated: no more in use"
        x-go-name: "CoverFeaturedImage"
      cover_image:
        type: "string"
        x-go-name: "CoverImage"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      friends_ids:
        type: "array"
        items:
          type: "string"
        x-go-name: "FriendsIds"
      games:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/GameDetail"
        x-go-name: "Games"
      infractions:
        description: "Deprecated: no more in use"
        x-go-name: "Infractions"
      membership_type:
        type: "string"
        description: "Deprecated: use memberships instead"
        x-go-name: "MembershipType"
      memberships:
        type: "array"
        items:
          type: "string"
        x-go-name: "Memberships"
      new_steam_id:
        type: "string"
        x-go-name: "NewSteamID"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      platforms:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Platforms"
      player_id:
        type: "string"
        x-go-name: "ID"
      settings:
        $ref: "#/definitions/UserSettings"
      steam_id_64:
        type: "string"
        x-go-name: "SteamID64"
      steam_nickname:
        type: "string"
        x-go-name: "SteamNickname"
      verified:
        type: "boolean"
        x-go-name: "Verified"
    example:
      country: "country"
      friends_ids:
      - "friends_ids"
      - "friends_ids"
      settings:
        language: "language"
      steam_nickname: "steam_nickname"
      verified: true
      infractions: ""
      avatar: "avatar"
      memberships:
      - "memberships"
      - "memberships"
      faceit_url: "faceit_url"
      platforms:
        key: "platforms"
      activated_at: "2000-01-23T04:56:07.000+00:00"
      cover_featured_image: "cover_featured_image"
      player_id: "player_id"
      games:
        key:
          regions: ""
          faceit_elo: 0
          skill_level_label: "skill_level_label"
          game_player_id: "game_player_id"
          game_profile_id: "game_profile_id"
          skill_level: 6
          region: "region"
          game_player_name: "game_player_name"
      nickname: "nickname"
      cover_image: "cover_image"
      new_steam_id: "new_steam_id"
      steam_id_64: "steam_id_64"
      membership_type: "membership_type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PlayerBan:
    type: "object"
    properties:
      ends_at:
        type: "string"
        format: "date-time"
        x-go-name: "EndsAt"
      game:
        type: "string"
        x-go-name: "Game"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      reason:
        type: "string"
        x-go-name: "Reason"
      starts_at:
        type: "string"
        format: "date-time"
        x-go-name: "StartsAt"
      type:
        type: "string"
        x-go-name: "Type"
      user_id:
        type: "string"
        x-go-name: "UserId"
    example:
      reason: "reason"
      game: "game"
      starts_at: "2000-01-23T04:56:07.000+00:00"
      user_id: "user_id"
      nickname: "nickname"
      ends_at: "2000-01-23T04:56:07.000+00:00"
      type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PlayerBansList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/PlayerBan"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - reason: "reason"
        game: "game"
        starts_at: "2000-01-23T04:56:07.000+00:00"
        user_id: "user_id"
        nickname: "nickname"
        ends_at: "2000-01-23T04:56:07.000+00:00"
        type: "type"
      - reason: "reason"
        game: "game"
        starts_at: "2000-01-23T04:56:07.000+00:00"
        user_id: "user_id"
        nickname: "nickname"
        ends_at: "2000-01-23T04:56:07.000+00:00"
        type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PlayerGlobalRanking:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/GlobalRanking"
        x-go-name: "Items"
      position:
        type: "integer"
        format: "int64"
        x-go-name: "Position"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 1
      end: 0
      position: 6
      items:
      - country: "country"
        player_id: "player_id"
        faceit_elo: 6
        game_skill_level: 1
        nickname: "nickname"
        position: 5
      - country: "country"
        player_id: "player_id"
        faceit_elo: 6
        game_skill_level: 1
        nickname: "nickname"
        position: 5
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PlayerInLeague:
    type: "object"
    properties:
      division_name:
        type: "string"
        description: "The division name that the player is in."
        x-go-name: "DivisionName"
      division_tier:
        type: "string"
        description: "The division tier that the player is in."
        x-go-name: "DivisionTier"
      division_type:
        type: "string"
        description: "The division type that the player is in."
        x-go-name: "DivisionType"
      leaderboard_id:
        type: "string"
        description: "The leaderboard id that the player is in."
        x-go-name: "LeaderboardId"
      points:
        type: "integer"
        format: "int64"
        description: "The points of the player in the leaderboard."
        x-go-name: "Points"
      position:
        type: "integer"
        format: "int64"
        description: "The position of the player in the leaderboard."
        x-go-name: "Position"
    title: "PlayerInLeague Model"
    description: "PlayerInLeague holds information about a player in a league."
    example:
      leaderboard_id: "leaderboard_id"
      division_type: "division_type"
      division_name: "division_name"
      position: 6
      division_tier: "division_tier"
      points: 0
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PlayerStats:
    type: "object"
    properties:
      game_id:
        type: "string"
        x-go-name: "GameID"
      lifetime:
        type: "object"
        additionalProperties: {}
        x-go-name: "Lifetime"
      player_id:
        type: "string"
        x-go-name: "PlayerID"
      segments:
        type: "array"
        items:
          type: "object"
          additionalProperties: {}
        x-go-name: "Segments"
    example:
      player_id: "player_id"
      lifetime:
        key: ""
      game_id: "game_id"
      segments:
      - key: ""
      - key: ""
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PlayerStatsForMatch:
    type: "object"
    properties:
      stats:
        type: "object"
        additionalProperties: {}
        x-go-name: "Stats"
    example:
      stats:
        key: ""
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PlayerStatsForMatchesList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/PlayerStatsForMatch"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - stats:
          key: ""
      - stats:
          key: ""
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PlayerStatsSimple:
    type: "object"
    properties:
      nickname:
        x-go-name: "Nickname"
      player_id:
        x-go-name: "PlayerID"
      player_stats:
        type: "object"
        additionalProperties: {}
        x-go-name: "PlayerStats"
    example:
      player_id: ""
      player_stats:
        key: ""
      nickname: ""
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Plugin:
    type: "object"
    required:
    - "Config"
    - "Enabled"
    - "Name"
    - "Settings"
    properties:
      Config:
        $ref: "#/definitions/PluginConfig"
      Enabled:
        type: "boolean"
        description: "True if the plugin is running. False if the plugin is not running,\
          \ only installed."
      Id:
        type: "string"
        description: "Id"
        x-go-name: "ID"
      Name:
        type: "string"
        description: "name"
      PluginReference:
        type: "string"
        description: "plugin remote reference used to push/pull the plugin"
      Settings:
        $ref: "#/definitions/PluginSettings"
    description: "Plugin A plugin for the Engine API"
    x-go-package: "github.com/docker/docker/api/types"
  PluginConfig:
    type: "object"
    required:
    - "Args"
    - "Description"
    - "Documentation"
    - "Entrypoint"
    - "Env"
    - "Interface"
    - "IpcHost"
    - "Linux"
    - "Mounts"
    - "Network"
    - "PidHost"
    - "PropagatedMount"
    - "WorkDir"
    properties:
      Args:
        $ref: "#/definitions/PluginConfigArgs"
      Description:
        type: "string"
        description: "description"
      DockerVersion:
        type: "string"
        description: "Docker Version used to create the plugin"
      Documentation:
        type: "string"
        description: "documentation"
      Entrypoint:
        type: "array"
        description: "entrypoint"
        items:
          type: "string"
      Env:
        type: "array"
        description: "env"
        items:
          $ref: "#/definitions/PluginEnv"
      Interface:
        $ref: "#/definitions/PluginConfigInterface"
      IpcHost:
        type: "boolean"
        description: "ipc host"
      Linux:
        $ref: "#/definitions/PluginConfigLinux"
      Mounts:
        type: "array"
        description: "mounts"
        items:
          $ref: "#/definitions/PluginMount"
      Network:
        $ref: "#/definitions/PluginConfigNetwork"
      PidHost:
        type: "boolean"
        description: "pid host"
      PropagatedMount:
        type: "string"
        description: "propagated mount"
      User:
        $ref: "#/definitions/PluginConfigUser"
      WorkDir:
        type: "string"
        description: "work dir"
      rootfs:
        $ref: "#/definitions/PluginConfigRootfs"
    title: "PluginConfig The config of a plugin."
    x-go-package: "github.com/docker/docker/api/types"
  PluginConfigArgs:
    type: "object"
    required:
    - "Description"
    - "Name"
    - "Settable"
    - "Value"
    properties:
      Description:
        type: "string"
        description: "description"
      Name:
        type: "string"
        description: "name"
      Settable:
        type: "array"
        description: "settable"
        items:
          type: "string"
      Value:
        type: "array"
        description: "value"
        items:
          type: "string"
    description: "PluginConfigArgs plugin config args"
    x-go-package: "github.com/docker/docker/api/types"
  PluginConfigInterface:
    type: "object"
    required:
    - "Socket"
    - "Types"
    properties:
      ProtocolScheme:
        type: "string"
        description: "Protocol to use for clients connecting to the plugin."
      Socket:
        type: "string"
        description: "socket"
      Types:
        type: "array"
        description: "types"
        items:
          $ref: "#/definitions/PluginInterfaceType"
    description: "PluginConfigInterface The interface between Docker and the plugin"
    x-go-package: "github.com/docker/docker/api/types"
  PluginConfigLinux:
    type: "object"
    required:
    - "AllowAllDevices"
    - "Capabilities"
    - "Devices"
    properties:
      AllowAllDevices:
        type: "boolean"
        description: "allow all devices"
      Capabilities:
        type: "array"
        description: "capabilities"
        items:
          type: "string"
      Devices:
        type: "array"
        description: "devices"
        items:
          $ref: "#/definitions/PluginDevice"
    description: "PluginConfigLinux plugin config linux"
    x-go-package: "github.com/docker/docker/api/types"
  PluginConfigNetwork:
    type: "object"
    required:
    - "Type"
    properties:
      Type:
        type: "string"
        description: "type"
    description: "PluginConfigNetwork plugin config network"
    x-go-package: "github.com/docker/docker/api/types"
  PluginConfigRootfs:
    type: "object"
    properties:
      diff_ids:
        type: "array"
        description: "diff ids"
        items:
          type: "string"
        x-go-name: "DiffIds"
      type:
        type: "string"
        description: "type"
        x-go-name: "Type"
    description: "PluginConfigRootfs plugin config rootfs"
    x-go-package: "github.com/docker/docker/api/types"
  PluginConfigUser:
    type: "object"
    properties:
      GID:
        type: "integer"
        format: "uint32"
        description: "g ID"
      UID:
        type: "integer"
        format: "uint32"
        description: "UID"
    description: "PluginConfigUser plugin config user"
    x-go-package: "github.com/docker/docker/api/types"
  PluginDevice:
    type: "object"
    required:
    - "Description"
    - "Name"
    - "Path"
    - "Settable"
    properties:
      Description:
        type: "string"
        description: "description"
      Name:
        type: "string"
        description: "name"
      Path:
        type: "string"
        description: "path"
      Settable:
        type: "array"
        description: "settable"
        items:
          type: "string"
    description: "PluginDevice plugin device"
    x-go-package: "github.com/docker/docker/api/types"
  PluginEnv:
    type: "object"
    required:
    - "Description"
    - "Name"
    - "Settable"
    - "Value"
    properties:
      Description:
        type: "string"
        description: "description"
      Name:
        type: "string"
        description: "name"
      Settable:
        type: "array"
        description: "settable"
        items:
          type: "string"
      Value:
        type: "string"
        description: "value"
    description: "PluginEnv plugin env"
    x-go-package: "github.com/docker/docker/api/types"
  PluginInterfaceType:
    type: "object"
    required:
    - "Capability"
    - "Prefix"
    - "Version"
    properties:
      Capability:
        type: "string"
        description: "capability"
      Prefix:
        type: "string"
        description: "prefix"
      Version:
        type: "string"
        description: "version"
    description: "PluginInterfaceType plugin interface type"
    x-go-package: "github.com/docker/docker/api/types"
  PluginMount:
    type: "object"
    required:
    - "Description"
    - "Destination"
    - "Name"
    - "Options"
    - "Settable"
    - "Source"
    - "Type"
    properties:
      Description:
        type: "string"
        description: "description"
      Destination:
        type: "string"
        description: "destination"
      Name:
        type: "string"
        description: "name"
      Options:
        type: "array"
        description: "options"
        items:
          type: "string"
      Settable:
        type: "array"
        description: "settable"
        items:
          type: "string"
      Source:
        type: "string"
        description: "source"
      Type:
        type: "string"
        description: "type"
    description: "PluginMount plugin mount"
    x-go-package: "github.com/docker/docker/api/types"
  PluginSettings:
    type: "object"
    required:
    - "Args"
    - "Devices"
    - "Env"
    - "Mounts"
    properties:
      Args:
        type: "array"
        description: "args"
        items:
          type: "string"
      Devices:
        type: "array"
        description: "devices"
        items:
          $ref: "#/definitions/PluginDevice"
      Env:
        type: "array"
        description: "env"
        items:
          type: "string"
      Mounts:
        type: "array"
        description: "mounts"
        items:
          $ref: "#/definitions/PluginMount"
    title: "PluginSettings Settings that can be modified by users."
    x-go-package: "github.com/docker/docker/api/types"
  Port:
    type: "object"
    required:
    - "PrivatePort"
    - "Type"
    properties:
      IP:
        type: "string"
        description: "Host IP address that the container's port is mapped to"
      PrivatePort:
        type: "integer"
        format: "uint16"
        description: "Port on the container"
      PublicPort:
        type: "integer"
        format: "uint16"
        description: "Port exposed on the host"
      Type:
        type: "string"
        description: "type"
    description: "Port An open port on a container"
    x-go-package: "github.com/docker/docker/api/types"
  Prize:
    type: "object"
    properties:
      faceit_points:
        type: "integer"
        format: "int64"
        x-go-name: "FaceitPoints"
      rank:
        type: "integer"
        format: "int64"
        x-go-name: "Rank"
    example:
      rank: 7
      faceit_points: 4
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Promotion:
    type: "object"
    properties:
      points:
        type: "integer"
        format: "int64"
        example: 10
        description: "Points needed for a player to get promoted."
        x-go-name: "Points"
    title: "Promotion Model"
    description: "Promotion holds information about what is required in order for\
      \ a player to be promoted to the next tier."
    example:
      points: 10
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  PublishState:
    type: "string"
    description: "PublishState represents the state of a Volume as it pertains to\
      \ its\nuse on a particular Node."
    x-go-package: "github.com/docker/docker/api/types/volume"
  PublishStatus:
    type: "object"
    properties:
      NodeID:
        type: "string"
        description: "NodeID is the ID of the swarm node this Volume is published\
          \ to."
      PublishContext:
        type: "object"
        description: "PublishContext is the PublishContext returned by the CSI plugin\
          \ when\na volume is published."
        additionalProperties:
          type: "string"
      State:
        $ref: "#/definitions/PublishState"
    description: "PublishStatus represents the status of the volume as published to\
      \ an\nindividual node"
    x-go-package: "github.com/docker/docker/api/types/volume"
  Queue:
    type: "object"
    properties:
      adminTool:
        type: "boolean"
        x-go-name: "AdminTool"
      anticheatRequired:
        type: "boolean"
        x-go-name: "AnticheatRequired"
      calculateElo:
        type: "boolean"
        x-go-name: "CalculateElo"
      captainSelection:
        type: "string"
        x-go-name: "CaptainSelection"
      checkIn:
        $ref: "#/definitions/CheckIn"
      entityId:
        type: "string"
        x-go-name: "EntityId"
      entityType:
        type: "string"
        x-go-name: "EntityType"
      fbiManagement:
        type: "boolean"
        x-go-name: "FbiManagement"
      game:
        type: "string"
        x-go-name: "Game"
      groupSimilar:
        type: "boolean"
        x-go-name: "GroupSimilar"
      id:
        type: "string"
        x-go-name: "Id"
      joinType:
        $ref: "#/definitions/JoinType"
      lastModified:
        type: "string"
        format: "date-time"
        x-go-name: "LastModified"
      maxSkill:
        type: "integer"
        format: "int64"
        x-go-name: "MaxSkill"
      minSkill:
        type: "integer"
        format: "int64"
        x-go-name: "MinSkill"
      noOfPlayers:
        type: "integer"
        format: "int64"
        x-go-name: "NoOfPlayers"
      open:
        type: "boolean"
        x-go-name: "Open"
      organizerId:
        type: "string"
        x-go-name: "OrganizerId"
      paused:
        type: "boolean"
        x-go-name: "Paused"
      queueAlgorithm:
        $ref: "#/definitions/QueueAlgorithm"
      queueName:
        type: "string"
        x-go-name: "QueueName"
      region:
        type: "string"
        x-go-name: "Region"
      state:
        type: "string"
        x-go-name: "State"
      verifiedMatching:
        type: "boolean"
        x-go-name: "VerifiedMatching"
    example:
      verifiedMatching: true
      captainSelection: "captainSelection"
      game: "game"
      paused: true
      entityType: "entityType"
      maxSkill: 1
      adminTool: true
      entityId: "entityId"
      calculateElo: true
      anticheatRequired: true
      checkIn:
        time: 0
      organizerId: "organizerId"
      queueName: "queueName"
      joinType:
        maxParty: 6
        solo: true
        premade: true
        party: true
      minSkill: 5
      groupSimilar: true
      noOfPlayers: 5
      fbiManagement: true
      id: "id"
      lastModified: "2000-01-23T04:56:07.000+00:00"
      state: "state"
      region: "region"
      open: true
      queueAlgorithm:
        roleBasedCaptainPick: true
        geoLabel:
          en: "en"
          fr: "fr"
        geoDescription:
          en: "en"
          fr: "fr"
        algorithmInput:
        - "algorithmInput"
        - "algorithmInput"
        algorithmParameters:
          band:
            value: 2
        id: "id"
        algorithmId: "algorithmId"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  QueueAlgorithm:
    type: "object"
    properties:
      algorithmId:
        type: "string"
        x-go-name: "AlgorithmId"
      algorithmInput:
        type: "array"
        items:
          type: "string"
        x-go-name: "AlgorithmInput"
      algorithmParameters:
        $ref: "#/definitions/AlgorithmParameters"
      geoDescription:
        $ref: "#/definitions/GeoDescription"
      geoLabel:
        $ref: "#/definitions/GeoLabel"
      id:
        type: "string"
        x-go-name: "Id"
      roleBasedCaptainPick:
        type: "boolean"
        x-go-name: "RoleBasedCaptainPick"
    example:
      roleBasedCaptainPick: true
      geoLabel:
        en: "en"
        fr: "fr"
      geoDescription:
        en: "en"
        fr: "fr"
      algorithmInput:
      - "algorithmInput"
      - "algorithmInput"
      algorithmParameters:
        band:
          value: 2
      id: "id"
      algorithmId: "algorithmId"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  QueueBan:
    type: "object"
    properties:
      banEnd:
        type: "string"
        format: "date-time"
        x-go-name: "BanEnd"
      banId:
        type: "string"
        x-go-name: "Id"
      banStart:
        type: "string"
        format: "date-time"
        x-go-name: "BanStart"
      createdAt:
        type: "string"
        format: "date-time"
        x-go-name: "CreatedAt"
      entityId:
        type: "string"
        x-go-name: "EntityId"
      entityType:
        type: "string"
        x-go-name: "EntityType"
      expired:
        type: "boolean"
        x-go-name: "Expired"
      lastModified:
        type: "string"
        format: "date-time"
        x-go-name: "LastModified"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      organizerId:
        type: "string"
        x-go-name: "OrganizerId"
      queueId:
        type: "string"
        x-go-name: "QueueId"
      reason:
        type: "string"
        x-go-name: "Reason"
      type:
        type: "string"
        x-go-name: "Type"
      userId:
        type: "string"
        x-go-name: "UserId"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    example:
      queueId: "queueId"
      reason: "reason"
      entityType: "entityType"
      banEnd: "2000-01-23T04:56:07.000+00:00"
      entityId: "entityId"
      type: "type"
      userId: "userId"
      version: 6
      createdAt: "2000-01-23T04:56:07.000+00:00"
      expired: true
      organizerId: "organizerId"
      banId: "banId"
      nickname: "nickname"
      lastModified: "2000-01-23T04:56:07.000+00:00"
      banStart: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  QueueBansList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/QueueBan"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 1
      end: 0
      items:
      - queueId: "queueId"
        reason: "reason"
        entityType: "entityType"
        banEnd: "2000-01-23T04:56:07.000+00:00"
        entityId: "entityId"
        type: "type"
        userId: "userId"
        version: 6
        createdAt: "2000-01-23T04:56:07.000+00:00"
        expired: true
        organizerId: "organizerId"
        banId: "banId"
        nickname: "nickname"
        lastModified: "2000-01-23T04:56:07.000+00:00"
        banStart: "2000-01-23T04:56:07.000+00:00"
      - queueId: "queueId"
        reason: "reason"
        entityType: "entityType"
        banEnd: "2000-01-23T04:56:07.000+00:00"
        entityId: "entityId"
        type: "type"
        userId: "userId"
        version: 6
        createdAt: "2000-01-23T04:56:07.000+00:00"
        expired: true
        organizerId: "organizerId"
        banId: "banId"
        nickname: "nickname"
        lastModified: "2000-01-23T04:56:07.000+00:00"
        banStart: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  QueueSimple:
    type: "object"
    properties:
      entityId:
        type: "string"
        x-go-name: "EntityId"
      entityType:
        type: "string"
        x-go-name: "EntityType"
      game:
        type: "string"
        x-go-name: "Game"
      id:
        type: "string"
        x-go-name: "Id"
      lastModified:
        type: "string"
        format: "date-time"
        x-go-name: "LastModified"
      open:
        type: "boolean"
        x-go-name: "Open"
      organizerId:
        type: "string"
        x-go-name: "OrganizerId"
      queueName:
        type: "string"
        x-go-name: "QueueName"
      region:
        type: "string"
        x-go-name: "Region"
      state:
        type: "string"
        x-go-name: "State"
    example:
      game: "game"
      organizerId: "organizerId"
      queueName: "queueName"
      entityType: "entityType"
      entityId: "entityId"
      id: "id"
      lastModified: "2000-01-23T04:56:07.000+00:00"
      state: "state"
      region: "region"
      open: true
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  QueuesList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/QueueSimple"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - game: "game"
        organizerId: "organizerId"
        queueName: "queueName"
        entityType: "entityType"
        entityId: "entityId"
        id: "id"
        lastModified: "2000-01-23T04:56:07.000+00:00"
        state: "state"
        region: "region"
        open: true
      - game: "game"
        organizerId: "organizerId"
        queueName: "queueName"
        entityType: "entityType"
        entityId: "entityId"
        id: "id"
        lastModified: "2000-01-23T04:56:07.000+00:00"
        state: "state"
        region: "region"
        open: true
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Ranking:
    type: "object"
    properties:
      current_streak:
        type: "integer"
        format: "int64"
        x-go-name: "CurrentStreak"
      draw:
        type: "integer"
        format: "int64"
        x-go-name: "Draw"
      lost:
        type: "integer"
        format: "int64"
        x-go-name: "Lost"
      played:
        type: "integer"
        format: "int64"
        x-go-name: "Played"
      player:
        $ref: "#/definitions/UserSimple"
      points:
        type: "integer"
        format: "int64"
        x-go-name: "Points"
      position:
        type: "integer"
        format: "int64"
        x-go-name: "Position"
      win_rate:
        type: "number"
        format: "double"
        x-go-name: "WinRate"
      won:
        type: "integer"
        format: "int64"
        x-go-name: "Won"
    example:
      lost: 5
      won: 3
      draw: 1
      position: 7
      win_rate: 9.301444243932576
      current_streak: 6
      played: 5
      player:
        country: "GB"
        user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
        nickname: "nickname"
        skill_level: 1
        avatar: "https://avatar.jpg"
        membership_type: "membership_type"
        memberships:
        - "free"
        - "unlimited"
        faceit_url: "faceit_url"
      points: 2
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Relegation:
    type: "object"
    properties:
      consecutive_losses:
        type: "integer"
        format: "int64"
        example: 3
        description: "Consecutive losses needed for a player to get relegated to the\
          \ previous tier."
        x-go-name: "ConsecutiveLosses"
    title: "Relegation Model"
    description: "Relegation holds information about what is required in order for\
      \ a player to be relegated to the previous tier."
    example:
      consecutive_losses: 3
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Role:
    type: "object"
    properties:
      color:
        type: "string"
        x-go-name: "Color"
      name:
        type: "string"
        x-go-name: "Name"
      ranking:
        type: "integer"
        format: "int64"
        x-go-name: "Ranking"
      role_id:
        type: "string"
        x-go-name: "ID"
      visible_on_chat:
        type: "boolean"
        x-go-name: "VisibleOnChat"
    example:
      color: "color"
      role_id: "role_id"
      visible_on_chat: true
      name: "name"
      ranking: 6
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  RolesList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Role"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 1
      end: 0
      items:
      - color: "color"
        role_id: "role_id"
        visible_on_chat: true
        name: "name"
        ranking: 6
      - color: "color"
        role_id: "role_id"
        visible_on_chat: true
        name: "name"
        ranking: 6
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Roster:
    type: "object"
    properties:
      anticheat_required:
        type: "boolean"
        x-go-name: "AnticheatRequired"
      avatar:
        type: "string"
        x-go-name: "Avatar"
      game_player_id:
        type: "string"
        x-go-name: "GamePlayerID"
      game_player_name:
        type: "string"
        x-go-name: "GamePlayerName"
      game_skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "GameSkillLevel"
      membership:
        type: "string"
        x-go-name: "Membership"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      player_id:
        type: "string"
        x-go-name: "ID"
    example:
      player_id: "player_id"
      game_player_id: "game_player_id"
      game_skill_level: 4
      nickname: "nickname"
      anticheat_required: true
      avatar: "avatar"
      membership: "membership"
      game_player_name: "game_player_name"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  RoundStats:
    type: "object"
    properties:
      best_of:
        x-go-name: "BestOf"
      competition_id:
        x-go-name: "CompetitionID"
      game_id:
        x-go-name: "GameID"
      game_mode:
        x-go-name: "GameMode"
      match_id:
        x-go-name: "MatchID"
      match_round:
        x-go-name: "MatchRound"
      played:
        x-go-name: "Played"
      round_stats:
        type: "object"
        additionalProperties: {}
        x-go-name: "RoundStats"
      teams:
        type: "array"
        items:
          $ref: "#/definitions/TeamStatsSimple"
        x-go-name: "Teams"
    example:
      round_stats:
        key: ""
      best_of: ""
      teams:
      - players:
        - player_id: ""
          player_stats:
            key: ""
          nickname: ""
        - player_id: ""
          player_stats:
            key: ""
          nickname: ""
        team_stats:
          key: ""
        team_id: ""
        premade: ""
      - players:
        - player_id: ""
          player_stats:
            key: ""
          nickname: ""
        - player_id: ""
          player_stats:
            key: ""
          nickname: ""
        team_stats:
          key: ""
        team_id: ""
        premade: ""
      competition_id: ""
      match_id: ""
      game_mode: ""
      match_round: ""
      played: ""
      game_id: ""
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Rules:
    type: "object"
    properties:
      body:
        type: "string"
        x-go-name: "Body"
      game:
        type: "string"
        x-go-name: "Game"
      name:
        type: "string"
        x-go-name: "Name"
      organizer:
        type: "string"
        x-go-name: "Organizer"
      rule_id:
        type: "string"
        x-go-name: "ID"
    example:
      rule_id: "rule_id"
      game: "game"
      organizer: "organizer"
      name: "name"
      body: "body"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Scope:
    type: "string"
    description: "Scope defines the Scope of a Cluster Volume. This is how many nodes\
      \ a\nVolume can be accessed simultaneously on."
    x-go-package: "github.com/docker/docker/api/types/volume"
  Season:
    type: "object"
    properties:
      end_date:
        type: "string"
        format: "date-time"
        description: "The end date of the season."
        x-go-name: "EndDate"
      number:
        type: "integer"
        format: "int64"
        description: "The season number."
        x-go-name: "Number"
      placement_match_count:
        type: "integer"
        format: "int64"
        description: "The placement match mount."
        x-go-name: "PlacementMatchCount"
      start_date:
        type: "string"
        format: "date-time"
        description: "The start date of the season."
        x-go-name: "StartDate"
    title: "Season Model"
    description: "Season holds information about a league season. When no older season\
      \ is requested, this field holds information about the season of the league."
    example:
      end_date: "2000-01-23T04:56:07.000+00:00"
      number: 7
      placement_match_count: 9
      start_date: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  SeasonDetailed:
    type: "object"
    properties:
      divisions:
        type: "array"
        description: "The divisions of the given season."
        items:
          $ref: "#/definitions/Division"
        x-go-name: "Divisions"
      season:
        $ref: "#/definitions/Season"
    example:
      season:
        end_date: "2000-01-23T04:56:07.000+00:00"
        number: 7
        placement_match_count: 9
        start_date: "2000-01-23T04:56:07.000+00:00"
      divisions:
      - tiers:
        - points_target: 5
          name: "name"
          rank: 1
        - points_target: 5
          name: "name"
          rank: 1
        assets:
          image: "image"
          color: "color"
          icon: "icon"
        leaderboard_config:
          relegation:
            consecutive_losses: 3
          max_players: 0
          points_per_win: 10
          starting_points: 6
          points_per_loss: -2
          promotion:
            points: 10
        min_elo: 5
        max_elo: 1
        name: "name"
        leaderboards:
        - "leaderboards"
        - "leaderboards"
        config_type: "config_type"
        type: "type"
      - tiers:
        - points_target: 5
          name: "name"
          rank: 1
        - points_target: 5
          name: "name"
          rank: 1
        assets:
          image: "image"
          color: "color"
          icon: "icon"
        leaderboard_config:
          relegation:
            consecutive_losses: 3
          max_players: 0
          points_per_win: 10
          starting_points: 6
          points_per_loss: -2
          promotion:
            points: 10
        min_elo: 5
        max_elo: 1
        name: "name"
        leaderboards:
        - "leaderboards"
        - "leaderboards"
        config_type: "config_type"
        type: "type"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Secret:
    type: "object"
    properties:
      Key:
        type: "string"
        description: "Key is the name of the key of the key-value pair passed to the\
          \ plugin."
      Secret:
        type: "string"
        description: "Secret is the swarm Secret object from which to read data. This\
          \ can be a\nSecret name or ID. The Secret data is retrieved by Swarm and\
          \ used as the\nvalue of the key-value pair passed to the plugin."
    description: "Secret represents a Swarm Secret value that must be passed to the\
      \ CSI\nstorage plugin when operating on this Volume. It represents one key-value\n\
      pair of possibly many."
    x-go-package: "github.com/docker/docker/api/types/volume"
  ServiceCreateResponse:
    type: "object"
    properties:
      ID:
        type: "string"
        description: "The ID of the created service."
      Warnings:
        type: "array"
        description: "Optional warning message.\n\nFIXME(thaJeztah): this should have\
          \ \"omitempty\" in the generated type."
        items:
          type: "string"
    description: "ServiceCreateResponse contains the information returned to a client\
      \ on the\ncreation of a new service."
    x-go-package: "github.com/docker/docker/api/types/swarm"
  ServiceUpdateResponse:
    type: "object"
    properties:
      Warnings:
        type: "array"
        description: "Optional warning messages"
        items:
          type: "string"
    description: "ServiceUpdateResponse service update response"
    x-go-package: "github.com/docker/docker/api/types/swarm"
  SharingMode:
    type: "string"
    description: "SharingMode defines the Sharing of a Cluster Volume. This is how\
      \ Tasks using a\nVolume at the same time can use it."
    x-go-package: "github.com/docker/docker/api/types/volume"
  SpacePlayer:
    type: "object"
    properties:
      activated_at:
        type: "string"
        format: "date-time"
        x-go-name: "ActivatedAt"
      address:
        $ref: "#/definitions/Address"
      avatar:
        type: "string"
        x-go-name: "Avatar"
      birth_date:
        $ref: "#/definitions/BirthDate"
      country:
        type: "string"
        x-go-name: "Country"
      cover_featured_image:
        type: "string"
        description: "Deprecated: no more in use"
        x-go-name: "CoverFeaturedImage"
      cover_image:
        type: "string"
        x-go-name: "CoverImage"
      email:
        type: "string"
        x-go-name: "Email"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      first_name:
        type: "string"
        x-go-name: "FirstName"
      friends_ids:
        type: "array"
        items:
          type: "string"
        x-go-name: "FriendsIds"
      games:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/GameDetail"
        x-go-name: "Games"
      infractions:
        description: "Deprecated: no more in use"
        x-go-name: "Infractions"
      last_name:
        type: "string"
        x-go-name: "LastName"
      membership_type:
        type: "string"
        description: "Deprecated: use memberships instead"
        x-go-name: "MembershipType"
      memberships:
        type: "array"
        items:
          type: "string"
        x-go-name: "Memberships"
      new_steam_id:
        type: "string"
        x-go-name: "NewSteamID"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      platforms:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Platforms"
      player_id:
        type: "string"
        x-go-name: "ID"
      settings:
        $ref: "#/definitions/UserSettings"
      steam_id_64:
        type: "string"
        x-go-name: "SteamID64"
      steam_nickname:
        type: "string"
        x-go-name: "SteamNickname"
      verified:
        type: "boolean"
        x-go-name: "Verified"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Stats:
    type: "object"
    properties:
      rating:
        type: "integer"
        format: "int64"
        x-go-name: "Rating"
      skillLevel:
        $ref: "#/definitions/Stats_skillLevel"
      winProbability:
        type: "number"
        format: "double"
        x-go-name: "WinProbability"
    example:
      winProbability: 6.84685269835264
      rating: 7
      skillLevel:
        average: 1
        range:
          min: 1
          max: 1
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  StatsCompetitionPlayer:
    type: "object"
    properties:
      nickname:
        type: "string"
        x-go-name: "Nickname"
      player_id:
        type: "string"
        x-go-name: "ID"
      stats:
        type: "object"
        additionalProperties: {}
        x-go-name: "Stats"
    example:
      player_id: "player_id"
      stats:
        key: ""
      nickname: "nickname"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  SubstitutionConfiguration:
    type: "object"
    properties:
      max_substitutes:
        type: "integer"
        format: "int64"
        x-go-name: "MaxSubstitutes"
      max_substitutions:
        type: "integer"
        format: "int64"
        x-go-name: "MaxSubstitutions"
    example:
      max_substitutes: 7
      max_substitutions: 1
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Summary:
    type: "object"
    required:
    - "Containers"
    - "Created"
    - "Id"
    - "Labels"
    - "ParentId"
    - "RepoDigests"
    - "RepoTags"
    - "SharedSize"
    - "Size"
    properties:
      Containers:
        type: "integer"
        format: "int64"
        description: "Number of containers using this image. Includes both stopped\
          \ and running\ncontainers.\n\nThis size is not calculated by default, and\
          \ depends on which API endpoint\nis used. `-1` indicates that the value\
          \ has not been set / calculated."
      Created:
        type: "integer"
        format: "int64"
        description: "Date and time at which the image was created as a Unix timestamp\n\
          (number of seconds sinds EPOCH)."
      Id:
        type: "string"
        description: "ID is the content-addressable ID of an image.\n\nThis identifier\
          \ is a content-addressable digest calculated from the\nimage's configuration\
          \ (which includes the digests of layers used by\nthe image).\n\nNote that\
          \ this digest differs from the `RepoDigests` below, which\nholds digests\
          \ of image manifests that reference the image."
        x-go-name: "ID"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
      ParentId:
        type: "string"
        description: "ID of the parent image.\n\nDepending on how the image was created,\
          \ this field may be empty and\nis only set for images that were built/created\
          \ locally. This field\nis empty if the image was pulled from an image registry."
        x-go-name: "ParentID"
      RepoDigests:
        type: "array"
        description: "List of content-addressable digests of locally available image\
          \ manifests\nthat the image is referenced from. Multiple manifests can refer\
          \ to the\nsame image.\n\nThese digests are usually only available if the\
          \ image was either pulled\nfrom a registry, or if the image was pushed to\
          \ a registry, which is when\nthe manifest is generated and its digest calculated."
        items:
          type: "string"
      RepoTags:
        type: "array"
        description: "List of image names/tags in the local image cache that reference\
          \ this\nimage.\n\nMultiple image tags can refer to the same image, and this\
          \ list may be\nempty if no tags reference the image, in which case the image\
          \ is\n\"untagged\", in which case it can still be referenced by its ID."
        items:
          type: "string"
      SharedSize:
        type: "integer"
        format: "int64"
        description: "Total size of image layers that are shared between this image\
          \ and other\nimages.\n\nThis size is not calculated by default. `-1` indicates\
          \ that the value\nhas not been set / calculated."
      Size:
        type: "integer"
        format: "int64"
        description: "Total size of the image including all layers it is composed\
          \ of."
      VirtualSize:
        type: "integer"
        format: "int64"
        description: "Total size of the image including all layers it is composed\
          \ of.\n\nDeprecated: this field is omitted in API v1.44, but kept for backward\
          \ compatibility. Use Size instead."
    description: "Summary summary"
    x-go-package: "github.com/docker/docker/api/types/image"
  Team:
    type: "object"
    properties:
      avatar:
        type: "string"
        example: "https://avatar.jpg"
        description: "The Avatar of a team"
        x-go-name: "Avatar"
      chat_room_id:
        type: "string"
        example: "team-6204037c-30e6-408b-8aaa-dd8219860b4b"
        description: "The ChatID of a team"
        x-go-name: "ChatID"
      cover_image:
        type: "string"
        example: "https://cover-image.jpg"
        description: "The CoverImage of a team"
        x-go-name: "CoverImage"
      description:
        type: "string"
        example: "Some description"
        description: "The Description of a team"
        x-go-name: "Description"
      facebook:
        type: "string"
        example: "https://facebook/team"
        description: "The Facebook of a team"
        x-go-name: "Facebook"
      faceit_url:
        type: "string"
        example: "https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b"
        description: "The FaceitUrl of a team"
        x-go-name: "FaceitUrl"
      game:
        type: "string"
        example: "csgo"
        description: "The Game of a team"
        x-go-name: "Game"
      leader:
        type: "string"
        example: "leader"
        description: "The Leader of a team"
        x-go-name: "Leader"
      members:
        type: "array"
        description: "The Members of a team\n\nCan be empty if not supported"
        items:
          $ref: "#/definitions/UserSimple"
        x-go-name: "Members"
      name:
        type: "string"
        example: "name"
        description: "The Name of a team"
        x-go-name: "Name"
      nickname:
        type: "string"
        example: "nickname"
        description: "The Nickname of a team"
        x-go-name: "Nickname"
      team_id:
        type: "string"
        example: "6204037c-30e6-408b-8aaa-dd8219860b4b"
        description: "The ID of a team"
        x-go-name: "ID"
      team_type:
        type: "string"
        example: "premade"
        description: "The TeamType of a team"
        x-go-name: "TeamType"
      twitter:
        type: "string"
        example: "https://twitter/team"
        description: "The Twitter of a team"
        x-go-name: "Twitter"
      website:
        type: "string"
        example: "https://team.website"
        description: "The Website of a team"
        x-go-name: "Website"
      youtube:
        type: "string"
        example: "https://youtube.com/team"
        description: "The Youtube of a team"
        x-go-name: "Youtube"
    title: "Team Model"
    description: "The Team holds information about a team."
    example:
      youtube: "https://youtube.com/team"
      leader: "leader"
      game: "csgo"
      website: "https://team.website"
      facebook: "https://facebook/team"
      description: "Some description"
      avatar: "https://avatar.jpg"
      team_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
      faceit_url: "https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b"
      twitter: "https://twitter/team"
      members:
      - country: "GB"
        user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
        nickname: "nickname"
        skill_level: 1
        avatar: "https://avatar.jpg"
        membership_type: "membership_type"
        memberships:
        - "free"
        - "unlimited"
        faceit_url: "faceit_url"
      - country: "GB"
        user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
        nickname: "nickname"
        skill_level: 1
        avatar: "https://avatar.jpg"
        membership_type: "membership_type"
        memberships:
        - "free"
        - "unlimited"
        faceit_url: "faceit_url"
      chat_room_id: "team-6204037c-30e6-408b-8aaa-dd8219860b4b"
      name: "name"
      nickname: "nickname"
      team_type: "premade"
      cover_image: "https://cover-image.jpg"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TeamList:
    type: "object"
    required:
    - "items"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        description: "The teams list."
        readOnly: true
        items:
          $ref: "#/definitions/Team"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    title: "TeamList Model"
    description: "The TeamList holds teams information."
    example:
      start: 6
      end: 0
      items:
      - youtube: "https://youtube.com/team"
        leader: "leader"
        game: "csgo"
        website: "https://team.website"
        facebook: "https://facebook/team"
        description: "Some description"
        avatar: "https://avatar.jpg"
        team_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
        faceit_url: "https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b"
        twitter: "https://twitter/team"
        members:
        - country: "GB"
          user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          nickname: "nickname"
          skill_level: 1
          avatar: "https://avatar.jpg"
          membership_type: "membership_type"
          memberships:
          - "free"
          - "unlimited"
          faceit_url: "faceit_url"
        - country: "GB"
          user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          nickname: "nickname"
          skill_level: 1
          avatar: "https://avatar.jpg"
          membership_type: "membership_type"
          memberships:
          - "free"
          - "unlimited"
          faceit_url: "faceit_url"
        chat_room_id: "team-6204037c-30e6-408b-8aaa-dd8219860b4b"
        name: "name"
        nickname: "nickname"
        team_type: "premade"
        cover_image: "https://cover-image.jpg"
      - youtube: "https://youtube.com/team"
        leader: "leader"
        game: "csgo"
        website: "https://team.website"
        facebook: "https://facebook/team"
        description: "Some description"
        avatar: "https://avatar.jpg"
        team_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
        faceit_url: "https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b"
        twitter: "https://twitter/team"
        members:
        - country: "GB"
          user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          nickname: "nickname"
          skill_level: 1
          avatar: "https://avatar.jpg"
          membership_type: "membership_type"
          memberships:
          - "free"
          - "unlimited"
          faceit_url: "faceit_url"
        - country: "GB"
          user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
          nickname: "nickname"
          skill_level: 1
          avatar: "https://avatar.jpg"
          membership_type: "membership_type"
          memberships:
          - "free"
          - "unlimited"
          faceit_url: "faceit_url"
        chat_room_id: "team-6204037c-30e6-408b-8aaa-dd8219860b4b"
        name: "name"
        nickname: "nickname"
        team_type: "premade"
        cover_image: "https://cover-image.jpg"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TeamSearch:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      chat_room_id:
        type: "string"
        x-go-name: "ChatID"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      game:
        type: "string"
        x-go-name: "Game"
      name:
        type: "string"
        x-go-name: "Name"
      team_id:
        type: "string"
        x-go-name: "ID"
      verified:
        type: "boolean"
        x-go-name: "Verified"
    example:
      game: "game"
      chat_room_id: "chat_room_id"
      name: "name"
      verified: true
      avatar: "avatar"
      team_id: "team_id"
      faceit_url: "faceit_url"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TeamStats:
    type: "object"
    properties:
      game_id:
        type: "string"
        x-go-name: "GameID"
      lifetime:
        type: "object"
        additionalProperties: {}
        x-go-name: "Lifetime"
      segments:
        type: "array"
        items:
          type: "object"
          additionalProperties: {}
        x-go-name: "Segments"
      team_id:
        type: "string"
        x-go-name: "TeamID"
    example:
      lifetime:
        key: ""
      team_id: "team_id"
      game_id: "game_id"
      segments:
      - key: ""
      - key: ""
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TeamStatsSimple:
    type: "object"
    properties:
      players:
        type: "array"
        items:
          $ref: "#/definitions/PlayerStatsSimple"
        x-go-name: "Players"
      premade:
        x-go-name: "Premade"
      team_id:
        x-go-name: "TeamID"
      team_stats:
        type: "object"
        additionalProperties: {}
        x-go-name: "TeamStats"
    example:
      players:
      - player_id: ""
        player_stats:
          key: ""
        nickname: ""
      - player_id: ""
        player_stats:
          key: ""
        nickname: ""
      team_stats:
        key: ""
      team_id: ""
      premade: ""
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TeamsSearchList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/TeamSearch"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - game: "game"
        chat_room_id: "chat_room_id"
        name: "name"
        verified: true
        avatar: "avatar"
        team_id: "team_id"
        faceit_url: "faceit_url"
      - game: "game"
        chat_room_id: "chat_room_id"
        name: "name"
        verified: true
        avatar: "avatar"
        team_id: "team_id"
        faceit_url: "faceit_url"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Tier:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the tier"
        x-go-name: "Name"
      points_target:
        type: "integer"
        format: "int64"
        description: "The target points for the tier"
        x-go-name: "Points"
      rank:
        type: "integer"
        format: "int64"
        example: 1
        description: "The rank of the tier"
        x-go-name: "Rank"
    example:
      points_target: 5
      name: "name"
      rank: 1
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Topology:
    type: "object"
    properties:
      Segments:
        type: "object"
        additionalProperties:
          type: "string"
    title: "Topology is a map of topological domains to topological segments."
    description: "This description is taken verbatim from the CSI Spec:\n\nA topological\
      \ domain is a sub-division of a cluster, like \"region\",\n\"zone\", \"rack\"\
      , etc.\nA topological segment is a specific instance of a topological domain,\n\
      like \"zone3\", \"rack3\", etc.\nFor example {\"com.company/zone\": \"Z1\",\
      \ \"com.company/rack\": \"R3\"}\nValid keys have two segments: an OPTIONAL prefix\
      \ and name, separated\nby a slash (/), for example: \"com.company.example/zone\"\
      .\nThe key name segment is REQUIRED. The prefix is OPTIONAL.\nThe key name MUST\
      \ be 63 characters or less, begin and end with an\nalphanumeric character ([a-z0-9A-Z]),\
      \ and contain only dashes (-),\nunderscores (_), dots (.), or alphanumerics\
      \ in between, for example\n\"zone\".\nThe key prefix MUST be 63 characters or\
      \ less, begin and end with a\nlower-case alphanumeric character ([a-z0-9]),\
      \ contain only\ndashes (-), dots (.), or lower-case alphanumerics in between,\
      \ and\nfollow domain name notation format\n(https://tools.ietf.org/html/rfc1035#section-2.3.1).\n\
      The key prefix SHOULD include the plugin's host company name and/or\nthe plugin\
      \ name, to minimize the possibility of collisions with keys\nfrom other plugins.\n\
      If a key prefix is specified, it MUST be identical across all\ntopology keys\
      \ returned by the SP (across all RPCs).\nKeys MUST be case-insensitive. Meaning\
      \ the keys \"Zone\" and \"zone\"\nMUST not both exist.\nEach value (topological\
      \ segment) MUST contain 1 or more strings.\nEach string MUST be 63 characters\
      \ or less and begin and end with an\nalphanumeric character with '-', '_', '.',\
      \ or alphanumerics in\nbetween."
    x-go-package: "github.com/docker/docker/api/types/volume"
  TopologyRequirement:
    type: "object"
    properties:
      Preferred:
        type: "array"
        description: "Preferred is a list of Topologies that the volume should attempt\
          \ to be\nprovisioned in.\n\nTaken from the CSI spec:\n\nSpecifies the list\
          \ of topologies the CO would prefer the volume to\nbe provisioned in.\n\n\
          This field is OPTIONAL. If TopologyRequirement is specified either\nrequisite\
          \ or preferred or both MUST be specified.\n\nAn SP MUST attempt to make\
          \ the provisioned volume available using\nthe preferred topologies in order\
          \ from first to last.\n\nIf requisite is specified, all topologies in preferred\
          \ list MUST\nalso be present in the list of requisite topologies.\n\nIf\
          \ the SP is unable to make the provisioned volume available\nfrom any of\
          \ the preferred topologies, the SP MAY choose a topology\nfrom the list\
          \ of requisite topologies.\nIf the list of requisite topologies is not specified,\
          \ then the SP\nMAY choose from the list of all possible topologies.\nIf\
          \ the list of requisite topologies is specified and the SP is\nunable to\
          \ make the provisioned volume available from any of the\nrequisite topologies\
          \ it MUST fail the CreateVolume call.\n\nExample 1:\nGiven a volume should\
          \ be accessible from a single zone, and\nrequisite =\n{\"region\": \"R1\"\
          , \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"}\npreferred\
          \ =\n{\"region\": \"R1\", \"zone\": \"Z3\"}\nthen the SP SHOULD first attempt\
          \ to make the provisioned volume\navailable from \"zone\" \"Z3\" in the\
          \ \"region\" \"R1\" and fall back to\n\"zone\" \"Z2\" in the \"region\"\
          \ \"R1\" if that is not possible.\n\nExample 2:\nGiven a volume should be\
          \ accessible from a single zone, and\nrequisite =\n{\"region\": \"R1\",\
          \ \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"},\n{\"region\"\
          : \"R1\", \"zone\": \"Z4\"},\n{\"region\": \"R1\", \"zone\": \"Z5\"}\npreferred\
          \ =\n{\"region\": \"R1\", \"zone\": \"Z4\"},\n{\"region\": \"R1\", \"zone\"\
          : \"Z2\"}\nthen the SP SHOULD first attempt to make the provisioned volume\n\
          accessible from \"zone\" \"Z4\" in the \"region\" \"R1\" and fall back to\n\
          \"zone\" \"Z2\" in the \"region\" \"R1\" if that is not possible. If that\n\
          is not possible, the SP may choose between either the \"zone\"\n\"Z3\" or\
          \ \"Z5\" in the \"region\" \"R1\".\n\nExample 3:\nGiven a volume should\
          \ be accessible from TWO zones (because an\nopaque parameter in CreateVolumeRequest,\
          \ for example, specifies\nthe volume is accessible from two zones, aka synchronously\n\
          replicated), and\nrequisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n\
          {\"region\": \"R1\", \"zone\": \"Z3\"},\n{\"region\": \"R1\", \"zone\":\
          \ \"Z4\"},\n{\"region\": \"R1\", \"zone\": \"Z5\"}\npreferred =\n{\"region\"\
          : \"R1\", \"zone\": \"Z5\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"}\nthen\
          \ the SP SHOULD first attempt to make the provisioned volume\naccessible\
          \ from the combination of the two \"zones\" \"Z5\" and \"Z3\" in\nthe \"\
          region\" \"R1\". If that's not possible, it should fall back to\na combination\
          \ of \"Z5\" and other possibilities from the list of\nrequisite. If that's\
          \ not possible, it should fall back  to a\ncombination of \"Z3\" and other\
          \ possibilities from the list of\nrequisite. If that's not possible, it\
          \ should fall back  to a\ncombination of other possibilities from the list\
          \ of requisite."
        items:
          $ref: "#/definitions/Topology"
      Requisite:
        type: "array"
        description: "Requisite specifies a list of Topologies, at least one of which\
          \ the\nvolume must be accessible from.\n\nTaken verbatim from the CSI Spec:\n\
          \nSpecifies the list of topologies the provisioned volume MUST be\naccessible\
          \ from.\nThis field is OPTIONAL. If TopologyRequirement is specified either\n\
          requisite or preferred or both MUST be specified.\n\nIf requisite is specified,\
          \ the provisioned volume MUST be\naccessible from at least one of the requisite\
          \ topologies.\n\nGiven\nx = number of topologies provisioned volume is accessible\
          \ from\nn = number of requisite topologies\nThe CO MUST ensure n >= 1. The\
          \ SP MUST ensure x >= 1\nIf x==n, then the SP MUST make the provisioned\
          \ volume available to\nall topologies from the list of requisite topologies.\
          \ If it is\nunable to do so, the SP MUST fail the CreateVolume call.\nFor\
          \ example, if a volume should be accessible from a single zone,\nand requisite\
          \ =\n{\"region\": \"R1\", \"zone\": \"Z2\"}\nthen the provisioned volume\
          \ MUST be accessible from the \"region\"\n\"R1\" and the \"zone\" \"Z2\"\
          .\nSimilarly, if a volume should be accessible from two zones, and\nrequisite\
          \ =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\"\
          : \"Z3\"}\nthen the provisioned volume MUST be accessible from the \"region\"\
          \n\"R1\" and both \"zone\" \"Z2\" and \"zone\" \"Z3\".\n\nIf x<n, then the\
          \ SP SHALL choose x unique topologies from the list\nof requisite topologies.\
          \ If it is unable to do so, the SP MUST fail\nthe CreateVolume call.\nFor\
          \ example, if a volume should be accessible from a single zone,\nand requisite\
          \ =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\"\
          : \"Z3\"}\nthen the SP may choose to make the provisioned volume available\
          \ in\neither the \"zone\" \"Z2\" or the \"zone\" \"Z3\" in the \"region\"\
          \ \"R1\".\nSimilarly, if a volume should be accessible from two zones, and\n\
          requisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\"\
          , \"zone\": \"Z3\"},\n{\"region\": \"R1\", \"zone\": \"Z4\"}\nthen the provisioned\
          \ volume MUST be accessible from any combination\nof two unique topologies:\
          \ e.g. \"R1/Z2\" and \"R1/Z3\", or \"R1/Z2\" and\n\"R1/Z4\", or \"R1/Z3\"\
          \ and \"R1/Z4\".\n\nIf x>n, then the SP MUST make the provisioned volume\
          \ available from\nall topologies from the list of requisite topologies and\
          \ MAY choose\nthe remaining x-n unique topologies from the list of all possible\n\
          topologies. If it is unable to do so, the SP MUST fail the\nCreateVolume\
          \ call.\nFor example, if a volume should be accessible from two zones, and\n\
          requisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"}\nthen the provisioned\
          \ volume MUST be accessible from the \"region\"\n\"R1\" and the \"zone\"\
          \ \"Z2\" and the SP may select the second zone\nindependently, e.g. \"R1/Z4\"\
          ."
        items:
          $ref: "#/definitions/Topology"
    description: "TopologyRequirement expresses the user's requirements for a volume's\n\
      accessible topology."
    x-go-package: "github.com/docker/docker/api/types/volume"
  Tournament:
    type: "object"
    properties:
      anticheat_required:
        type: "boolean"
        x-go-name: "AnticheatRequired"
      best_of:
        x-go-name: "BestOf"
      calculate_elo:
        type: "boolean"
        x-go-name: "CalculateElo"
      competition_id:
        type: "string"
        description: "DEPRECATED: use tournament_id instead"
        x-go-name: "IDdep"
      cover_image:
        type: "string"
        x-go-name: "CoverImage"
      custom:
        type: "boolean"
        x-go-name: "Custom"
      description:
        type: "string"
        x-go-name: "Description"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      featured_image:
        type: "string"
        x-go-name: "FeaturedImage"
      game_data:
        $ref: "#/definitions/Game"
      game_id:
        type: "string"
        x-go-name: "GameID"
      invite_type:
        type: "string"
        x-go-name: "InviteType"
      match_type:
        type: "string"
        x-go-name: "MatchType"
      max_skill:
        type: "integer"
        format: "int64"
        x-go-name: "MaxSkill"
      membership_type:
        type: "string"
        x-go-name: "MembershipType"
      min_skill:
        type: "integer"
        format: "int64"
        x-go-name: "MinSkill"
      name:
        type: "string"
        x-go-name: "Name"
      number_of_players:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfPlayers"
      number_of_players_checkedin:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfPlayersCheckedIn"
      number_of_players_joined:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfPlayersJoined"
      number_of_players_participants:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfPlayersParticipants"
      organizer_data:
        $ref: "#/definitions/Organizer"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerID"
      prize_type:
        type: "string"
        x-go-name: "PrizeType"
      region:
        type: "string"
        x-go-name: "Region"
      rounds:
        type: "array"
        items: {}
        x-go-name: "Rounds"
      rule:
        type: "string"
        x-go-name: "Rule"
      started_at:
        type: "integer"
        format: "int64"
        x-go-name: "StartedAt"
      status:
        type: "string"
        x-go-name: "Status"
      substitutes_allowed:
        type: "integer"
        format: "int64"
        x-go-name: "SubstitutesAllowed"
      substitutions_allowed:
        type: "integer"
        format: "int64"
        x-go-name: "SubstitutionsAllowed"
      team_size:
        type: "integer"
        format: "int64"
        x-go-name: "TeamSize"
      total_prize:
        x-go-name: "TotalPrize"
      tournament_id:
        type: "string"
        x-go-name: "ID"
      voting:
        x-go-name: "Voting"
      whitelist_countries:
        type: "array"
        items:
          type: "string"
        x-go-name: "WhitelistCountries"
    example:
      calculate_elo: true
      number_of_players_checkedin: 5
      description: "description"
      rule: "rule"
      voting: ""
      substitutions_allowed: 3
      substitutes_allowed: 9
      tournament_id: "tournament_id"
      invite_type: "invite_type"
      best_of: ""
      whitelist_countries:
      - "whitelist_countries"
      - "whitelist_countries"
      organizer_id: "organizer_id"
      match_type: "match_type"
      cover_image: "cover_image"
      membership_type: "membership_type"
      number_of_players_participants: 2
      game_id: "game_id"
      organizer_data:
        youtube: "youtube"
        website: "website"
        twitch: "twitch"
        facebook: "facebook"
        description: "description"
        avatar: "avatar"
        type: "type"
        faceit_url: "faceit_url"
        cover: "cover"
        twitter: "twitter"
        vk: "vk"
        followers_count: 2
        organizer_id: "organizer_id"
        name: "name"
      team_size: 2
      custom: true
      number_of_players: 1
      min_skill: 6
      featured_image: "featured_image"
      faceit_url: "faceit_url"
      game_data:
        short_label: "short_label"
        assets:
          cover: "cover"
          featured_img_s: "featured_img_s"
          flag_img_l: "flag_img_l"
          flag_img_m: "flag_img_m"
          featured_img_m: "featured_img_m"
          featured_img_l: "featured_img_l"
          flag_img_s: "flag_img_s"
          flag_img_icon: "flag_img_icon"
          landing_page: "landing_page"
        regions:
        - "regions"
        - "regions"
        long_label: "long_label"
        parent_game_id: "parent_game_id"
        game_id: "game_id"
        order: 2
        platforms:
        - "platforms"
        - "platforms"
      max_skill: 0
      competition_id: "competition_id"
      name: "name"
      started_at: 7
      anticheat_required: true
      number_of_players_joined: 5
      region: "region"
      total_prize: ""
      prize_type: "prize_type"
      rounds:
      - ""
      - ""
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TournamentSimple:
    type: "object"
    properties:
      anticheat_required:
        type: "boolean"
        x-go-name: "AnticheatRequired"
      custom:
        type: "boolean"
        x-go-name: "Custom"
      faceit_url:
        type: "string"
        x-go-name: "FaceitUrl"
      featured_image:
        type: "string"
        x-go-name: "FeaturedImage"
      game_id:
        type: "string"
        x-go-name: "GameID"
      invite_type:
        type: "string"
        x-go-name: "InviteType"
      match_type:
        type: "string"
        x-go-name: "MatchType"
      max_skill:
        type: "integer"
        format: "int64"
        x-go-name: "MaxSkill"
      membership_type:
        type: "string"
        x-go-name: "MembershipType"
      min_skill:
        type: "integer"
        format: "int64"
        x-go-name: "MinSkill"
      name:
        type: "string"
        x-go-name: "Name"
      number_of_players:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfPlayers"
      number_of_players_checkedin:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfPlayersCheckedIn"
      number_of_players_joined:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfPlayersJoined"
      number_of_players_participants:
        type: "integer"
        format: "int64"
        x-go-name: "NumberOfPlayersParticipants"
      organizer_id:
        type: "string"
        x-go-name: "OrganizerID"
      prize_type:
        type: "string"
        x-go-name: "PrizeType"
      region:
        type: "string"
        x-go-name: "Region"
      started_at:
        type: "integer"
        format: "int64"
        x-go-name: "StartedAt"
      status:
        type: "string"
        x-go-name: "Status"
      subscriptions_count:
        type: "integer"
        format: "int64"
        x-go-name: "SubscriptionsCount"
      team_size:
        type: "integer"
        format: "int64"
        x-go-name: "TeamSize"
      total_prize:
        x-go-name: "TotalPrize"
      tournament_id:
        type: "string"
        x-go-name: "ID"
      whitelist_countries:
        type: "array"
        items:
          type: "string"
        x-go-name: "WhitelistCountries"
    example:
      number_of_players_checkedin: 5
      tournament_id: "tournament_id"
      invite_type: "invite_type"
      whitelist_countries:
      - "whitelist_countries"
      - "whitelist_countries"
      organizer_id: "organizer_id"
      match_type: "match_type"
      membership_type: "membership_type"
      number_of_players_participants: 7
      game_id: "game_id"
      team_size: 2
      custom: true
      number_of_players: 5
      min_skill: 1
      featured_image: "featured_image"
      faceit_url: "faceit_url"
      max_skill: 6
      subscriptions_count: 3
      name: "name"
      started_at: 9
      anticheat_required: true
      number_of_players_joined: 2
      region: "region"
      total_prize: ""
      prize_type: "prize_type"
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TournamentTeam:
    type: "object"
    properties:
      nickname:
        type: "string"
        x-go-name: "Nickname"
      skill_level:
        type: "integer"
        format: "int64"
        x-go-name: "SkillLevel"
      subs_done:
        type: "integer"
        format: "int64"
        x-go-name: "SubsDone"
      team_id:
        type: "string"
        x-go-name: "ID"
      team_leader:
        type: "string"
        x-go-name: "TeamLeader"
      team_type:
        type: "string"
        x-go-name: "TeamType"
    example:
      nickname: "nickname"
      skill_level: 0
      team_leader: "team_leader"
      team_type: "team_type"
      team_id: "team_id"
      subs_done: 6
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TournamentTeams:
    type: "object"
    properties:
      checked_in:
        type: "array"
        items:
          $ref: "#/definitions/TournamentTeam"
        x-go-name: "CheckedIn"
      finished:
        type: "array"
        items:
          $ref: "#/definitions/TournamentTeam"
        x-go-name: "Finished"
      joined:
        type: "array"
        items:
          $ref: "#/definitions/TournamentTeam"
        x-go-name: "Joined"
      started:
        type: "array"
        items:
          $ref: "#/definitions/TournamentTeam"
        x-go-name: "Started"
    example:
      checked_in:
      - nickname: "nickname"
        skill_level: 0
        team_leader: "team_leader"
        team_type: "team_type"
        team_id: "team_id"
        subs_done: 6
      - nickname: "nickname"
        skill_level: 0
        team_leader: "team_leader"
        team_type: "team_type"
        team_id: "team_id"
        subs_done: 6
      joined:
      - nickname: "nickname"
        skill_level: 0
        team_leader: "team_leader"
        team_type: "team_type"
        team_id: "team_id"
        subs_done: 6
      - nickname: "nickname"
        skill_level: 0
        team_leader: "team_leader"
        team_type: "team_type"
        team_id: "team_id"
        subs_done: 6
      finished:
      - nickname: "nickname"
        skill_level: 0
        team_leader: "team_leader"
        team_type: "team_type"
        team_id: "team_id"
        subs_done: 6
      - nickname: "nickname"
        skill_level: 0
        team_leader: "team_leader"
        team_type: "team_type"
        team_id: "team_id"
        subs_done: 6
      started:
      - nickname: "nickname"
        skill_level: 0
        team_leader: "team_leader"
        team_type: "team_type"
        team_id: "team_id"
        subs_done: 6
      - nickname: "nickname"
        skill_level: 0
        team_leader: "team_leader"
        team_type: "team_type"
        team_id: "team_id"
        subs_done: 6
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TournamentsList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/TournamentSimple"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 4
      end: 0
      items:
      - number_of_players_checkedin: 5
        tournament_id: "tournament_id"
        invite_type: "invite_type"
        whitelist_countries:
        - "whitelist_countries"
        - "whitelist_countries"
        organizer_id: "organizer_id"
        match_type: "match_type"
        membership_type: "membership_type"
        number_of_players_participants: 7
        game_id: "game_id"
        team_size: 2
        custom: true
        number_of_players: 5
        min_skill: 1
        featured_image: "featured_image"
        faceit_url: "faceit_url"
        max_skill: 6
        subscriptions_count: 3
        name: "name"
        started_at: 9
        anticheat_required: true
        number_of_players_joined: 2
        region: "region"
        total_prize: ""
        prize_type: "prize_type"
        status: "status"
      - number_of_players_checkedin: 5
        tournament_id: "tournament_id"
        invite_type: "invite_type"
        whitelist_countries:
        - "whitelist_countries"
        - "whitelist_countries"
        organizer_id: "organizer_id"
        match_type: "match_type"
        membership_type: "membership_type"
        number_of_players_participants: 7
        game_id: "game_id"
        team_size: 2
        custom: true
        number_of_players: 5
        min_skill: 1
        featured_image: "featured_image"
        faceit_url: "faceit_url"
        max_skill: 6
        subscriptions_count: 3
        name: "name"
        started_at: 9
        anticheat_required: true
        number_of_players_joined: 2
        region: "region"
        total_prize: ""
        prize_type: "prize_type"
        status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  TypeBlock:
    type: "object"
    title: "TypeBlock defines options for using a volume as a block-type volume."
    description: "Intentionally empty."
    x-go-package: "github.com/docker/docker/api/types/volume"
  TypeMount:
    type: "object"
    properties:
      FsType:
        type: "string"
        description: "FsType specifies the filesystem type for the mount volume. Optional."
      MountFlags:
        type: "array"
        description: "MountFlags defines flags to pass when mounting the volume. Optional."
        items:
          type: "string"
    description: "TypeMount contains options for using a volume as a Mount-type\n\
      volume."
    x-go-package: "github.com/docker/docker/api/types/volume"
  UsageData:
    type: "object"
    required:
    - "RefCount"
    - "Size"
    properties:
      RefCount:
        type: "integer"
        format: "int64"
        description: "The number of containers referencing this volume. This field\n\
          is set to `-1` if the reference-count is not available."
      Size:
        type: "integer"
        format: "int64"
        description: "Amount of disk space used by the volume (in bytes). This information\n\
          is only available for volumes created with the `\"local\"` volume\ndriver.\
          \ For volumes created with other volume drivers, this field\nis set to `-1`\
          \ (\"not available\")"
    description: "UsageData Usage details about the volume. This information is used\
      \ by the\n`GET /system/df` endpoint, and omitted in other endpoints."
    x-go-package: "github.com/docker/docker/api/types/volume"
  UserSearch:
    type: "object"
    properties:
      avatar:
        type: "string"
        x-go-name: "Avatar"
      country:
        type: "string"
        x-go-name: "Country"
      games:
        type: "array"
        items:
          $ref: "#/definitions/GameUserSearch"
        x-go-name: "Games"
      nickname:
        type: "string"
        x-go-name: "Nickname"
      player_id:
        type: "string"
        x-go-name: "ID"
      status:
        type: "string"
        x-go-name: "Status"
      verified:
        type: "boolean"
        x-go-name: "Verified"
    example:
      country: "country"
      player_id: "player_id"
      games:
      - name: "name"
        skill_level: "skill_level"
      - name: "name"
        skill_level: "skill_level"
      nickname: "nickname"
      verified: true
      avatar: "avatar"
      status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  UserSettings:
    type: "object"
    properties:
      language:
        type: "string"
        x-go-name: "Language"
    example:
      language: "language"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  UserSimple:
    type: "object"
    properties:
      avatar:
        type: "string"
        example: "https://avatar.jpg"
        description: "The Avatar of a user"
        x-go-name: "Avatar"
      country:
        type: "string"
        example: "GB"
        description: "The Country of a user"
        x-go-name: "Country"
      faceit_url:
        type: "string"
        description: "The FaceitUrl of a user"
        x-go-name: "FaceitUrl"
      membership_type:
        type: "string"
        description: "Deprecated: use memberships instead"
        x-go-name: "MembershipType"
      memberships:
        type: "array"
        example:
        - "free"
        - "unlimited"
        description: "The Memberships of a user"
        items:
          type: "string"
        x-go-name: "Memberships"
      nickname:
        type: "string"
        example: "nickname"
        description: "The Nickname of a user"
        x-go-name: "Nickname"
      skill_level:
        type: "integer"
        format: "int64"
        example: 1
        description: "The SkillLevel of a user"
        x-go-name: "SkillLevel"
      user_id:
        type: "string"
        example: "6204037c-30e6-408b-8aaa-dd8219860b4b"
        description: "The ID of a user"
        x-go-name: "ID"
    title: "UserSimple Model"
    description: "The UserSimple holds information about a user."
    example:
      country: "GB"
      user_id: "6204037c-30e6-408b-8aaa-dd8219860b4b"
      nickname: "nickname"
      skill_level: 1
      avatar: "https://avatar.jpg"
      membership_type: "membership_type"
      memberships:
      - "free"
      - "unlimited"
      faceit_url: "faceit_url"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  UsersSearchList:
    type: "object"
    properties:
      end:
        type: "integer"
        format: "int64"
        x-go-name: "End"
      items:
        type: "array"
        items:
          $ref: "#/definitions/UserSearch"
        x-go-name: "Items"
      start:
        type: "integer"
        format: "int64"
        x-go-name: "Start"
    example:
      start: 6
      end: 0
      items:
      - country: "country"
        player_id: "player_id"
        games:
        - name: "name"
          skill_level: "skill_level"
        - name: "name"
          skill_level: "skill_level"
        nickname: "nickname"
        verified: true
        avatar: "avatar"
        status: "status"
      - country: "country"
        player_id: "player_id"
        games:
        - name: "name"
          skill_level: "skill_level"
        - name: "name"
          skill_level: "skill_level"
        nickname: "nickname"
        verified: true
        avatar: "avatar"
        status: "status"
    x-go-package: "github.com/faceit/open-data-api/models/externals"
  Version:
    type: "object"
    properties:
      Index:
        type: "integer"
        format: "uint64"
    title: "Version represents the internal object version."
    x-go-package: "github.com/docker/docker/api/types/swarm"
  Volume:
    type: "object"
    required:
    - "Driver"
    - "Labels"
    - "Mountpoint"
    - "Name"
    - "Options"
    - "Scope"
    properties:
      ClusterVolume:
        $ref: "#/definitions/ClusterVolume"
      CreatedAt:
        type: "string"
        description: "Date/Time the volume was created."
      Driver:
        type: "string"
        description: "Name of the volume driver used by the volume."
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
      Mountpoint:
        type: "string"
        description: "Mount path of the volume on the host."
      Name:
        type: "string"
        description: "Name of the volume."
      Options:
        type: "object"
        description: "The driver specific options used when creating the volume."
        additionalProperties:
          type: "string"
      Scope:
        type: "string"
        description: "The level at which the volume exists. Either `global` for cluster-wide,\n\
          or `local` for machine level."
      Status:
        type: "object"
        description: "Low-level details about the volume, provided by the volume driver.\n\
          Details are returned as a map with key/value pairs:\n`{\"key\":\"value\"\
          ,\"key2\":\"value2\"}`.\n\nThe `Status` field is optional, and is omitted\
          \ if the volume driver\ndoes not support this feature."
        additionalProperties: {}
      UsageData:
        $ref: "#/definitions/UsageData"
    description: "Volume volume"
    x-go-package: "github.com/docker/docker/api/types/volume"
  WaitExitError:
    type: "object"
    properties:
      Message:
        type: "string"
        description: "Details of an error"
    description: "WaitExitError container waiting error, if any"
    x-go-package: "github.com/docker/docker/api/types/container"
  WaitResponse:
    type: "object"
    required:
    - "StatusCode"
    properties:
      Error:
        $ref: "#/definitions/WaitExitError"
      StatusCode:
        type: "integer"
        format: "int64"
        description: "Exit code of the container"
    title: "WaitResponse ContainerWaitResponse"
    description: "OK response to ContainerWait operation"
    x-go-package: "github.com/docker/docker/api/types/container"
  Game_assets:
    type: "object"
    properties:
      cover:
        type: "string"
        x-go-name: "Cover"
      featured_img_l:
        type: "string"
        x-go-name: "FeaturedImgL"
      featured_img_m:
        type: "string"
        x-go-name: "FeaturedImgM"
      featured_img_s:
        type: "string"
        x-go-name: "FeaturedImgS"
      flag_img_icon:
        type: "string"
        x-go-name: "FlagImgIcon"
      flag_img_l:
        type: "string"
        x-go-name: "FlagImgL"
      flag_img_m:
        type: "string"
        x-go-name: "FlagImgM"
      flag_img_s:
        type: "string"
        x-go-name: "FlagImgS"
      landing_page:
        type: "string"
        x-go-name: "LandingPage"
    example:
      cover: "cover"
      featured_img_s: "featured_img_s"
      flag_img_l: "flag_img_l"
      flag_img_m: "flag_img_m"
      featured_img_m: "featured_img_m"
      featured_img_l: "featured_img_l"
      flag_img_s: "flag_img_s"
      flag_img_icon: "flag_img_icon"
      landing_page: "landing_page"
    x-go-name: "Assets"
  Stats_skillLevel_range:
    type: "object"
    properties:
      max:
        type: "integer"
        format: "int64"
        x-go-name: "Max"
      min:
        type: "integer"
        format: "int64"
        x-go-name: "Min"
    example:
      min: 1
      max: 1
    x-go-name: "Range"
  Stats_skillLevel:
    type: "object"
    properties:
      average:
        type: "integer"
        format: "int64"
        x-go-name: "Average"
      range:
        $ref: "#/definitions/Stats_skillLevel_range"
    example:
      average: 1
      range:
        min: 1
        max: 1
    x-go-name: "SkillLevel"
